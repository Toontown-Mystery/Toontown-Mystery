from direct.distributed import DistributedObject/AI/UD
from direct.distributed import DistributedNode/AI/UD
from direct.distributed import DistributedSmoothNode/AI
from direct.distributed import DistributedCartesianGrid/AI
from direct.distributed import DistributedCamera/AI/OV
from otp.distributed import Account/AI/UD
from otp.ai import TimeManager/AI
from otp.ai import MagicWordManager/AI
from otp.avatar import DistributedAvatar/AI/UD
from otp.avatar import DistributedPlayer/AI
from otp.friends import FriendManager/AI
from otp.friends import AvatarFriendsManager/UD
from otp.friends import PlayerFriendsManager/UD
from otp.friends import GuildManager/AI/UD
from otp.friends import FriendInfo
from otp.friends import AvatarFriendInfo
from otp.distributed import ObjectServer/AI/UD
from otp.distributed import DistributedDistrict/AI/UD
from otp.distributed import DistributedDirectory/AI
from otp.distributed import DistributedTestObject/AI
from otp.snapshot import SnapshotDispatcher/AI/UD
from otp.snapshot import SnapshotRenderer/AI/UD
from otp.uberdog import OtpAvatarManager/AI/UD
from otp.uberdog import DistributedChatManager/AI/UD
from otp.uberdog import SpeedchatRelay/UD
from otp.uberdog import GameServicesManager/UD
from otp.distributed import CentralLogger/AI/UD
from otp.web import SettingsMgr/AI/UD
from otp.status import StatusDatabase/UD
from otp.avatar import AvatarHandle
from direct.distributed import DistributedObjectGlobal
from toontown.ai import WelcomeValleyManager/AI
from toontown.building import DistributedAnimatedProp/AI
from toontown.toon import DistributedToon/AI/UD
from toontown.classicchars import DistributedCCharBase/AI
from toontown.classicchars import DistributedMickey/AI
from toontown.classicchars import DistributedVampireMickey/AI
from toontown.classicchars import DistributedMinnie/AI
from toontown.classicchars import DistributedWitchMinnie/AI
from toontown.classicchars import DistributedGoofy/AI
from toontown.classicchars import DistributedSuperGoofy/AI
from toontown.classicchars import DistributedDaisy/AI
from toontown.classicchars import DistributedSockHopDaisy/AI
from toontown.classicchars import DistributedChip/AI
from toontown.classicchars import DistributedPoliceChip/AI
from toontown.classicchars import DistributedDale/AI
from toontown.classicchars import DistributedJailbirdDale/AI
from toontown.classicchars import DistributedGoofySpeedway/AI
from toontown.classicchars import DistributedDonald/AI
from toontown.classicchars import DistributedFrankenDonald/AI
from toontown.classicchars import DistributedDonaldDock/AI
from toontown.classicchars import DistributedPluto/AI
from toontown.classicchars import DistributedWesternPluto/AI
from toontown.safezone import DistributedTrolley/AI
from toontown.safezone import DistributedPartyGate/AI
from toontown.suit import DistributedSuitPlanner/AI
from toontown.suit import DistributedSuitBase/AI
from toontown.suit import DistributedSuit/AI
from toontown.suit import DistributedTutorialSuit/AI
from toontown.suit import DistributedFactorySuit/AI
from toontown.suit import DistributedMintSuit/AI
from toontown.suit import DistributedStageSuit/AI
from toontown.suit import DistributedSellbotBoss/AI
from toontown.suit import DistributedCashbotBoss/AI
from toontown.coghq import DistributedCashbotBossSafe/AI
from toontown.coghq import DistributedCashbotBossCrane/AI
from toontown.suit import DistributedCashbotBossGoon/AI
from toontown.battle import DistributedBattleBase/AI
from toontown.battle import DistributedBattle/AI
from toontown.battle import DistributedBattleBldg/AI
from toontown.tutorial import DistributedBattleTutorial/AI
from toontown.coghq import DistributedBattleFactory/AI
from toontown.battle import DistributedBattleFinal/AI
from toontown.safezone import DistributedBoat/AI
from toontown.safezone import DistributedButterfly/AI
from toontown.safezone import DistributedMMPiano/AI
from toontown.safezone import DistributedDGFlower/AI
from toontown.fishing import DistributedFishingPond/AI
from toontown.fishing import DistributedFishingTarget/AI
from toontown.fishing import DistributedPondBingoManager/AI
from toontown.safezone import DistributedFishingSpot/AI
from toontown.estate import DistributedCannon/AI
from toontown.estate import DistributedTarget/AI
from toontown.minigame import DistributedMinigame/AI
from toontown.minigame import DistributedMinigameTemplate/AI
from toontown.minigame import DistributedRaceGame/AI
from toontown.minigame import DistributedCannonGame/AI
from toontown.minigame import DistributedPhotoGame/AI
from toontown.minigame import DistributedPatternGame/AI
from toontown.minigame import DistributedRingGame/AI
from toontown.minigame import DistributedTagGame/AI
from toontown.minigame import DistributedMazeGame/AI
from toontown.minigame import DistributedTugOfWarGame/AI
from toontown.minigame import DistributedCatchGame/AI
from toontown.minigame import DistributedDivingGame/AI
from toontown.minigame import DistributedTargetGame/AI
from toontown.estate import EstateManager/AI
from toontown.estate import DistributedEstate/AI
from toontown.estate import DistributedHouse/AI
from toontown.estate import DistributedHouseInterior/AI
from toontown.estate import DistributedGarden/AI
from toontown.shtiker import DeleteManager/AI
from toontown.ai import ToontownMagicWordManager/AI
from toontown.ai import NewsManager/AI
from toontown.shtiker import PurchaseManager/AI
from toontown.shtiker import NewbiePurchaseManager/AI
from toontown.safezone import SafeZoneManager/AI
from toontown.tutorial import TutorialManager/AI
from toontown.catalog import CatalogManager/AI
from toontown.safezone import DistributedTreasure/AI
from toontown.safezone import DistributedDDTreasure/AI
from toontown.safezone import DistributedDGTreasure/AI
from toontown.safezone import DistributedDLTreasure/AI
from toontown.safezone import DistributedTTTreasure/AI
from toontown.safezone import DistributedBRTreasure/AI
from toontown.safezone import DistributedMMTreasure/AI
from toontown.safezone import DistributedOZTreasure/AI
from toontown.safezone import DistributedETreasure/AI
from toontown.safezone import DistributedEFlyingTreasure/AI
from toontown.minigame import DistributedTagTreasure/AI
from toontown.coghq import DistributedCashbotBossTreasure/AI
from toontown.building import DistributedTrophyMgr/AI
from toontown.building import DistributedBuilding/AI
from toontown.building import DistributedAnimBuilding/AI
from toontown.building import DistributedToonInterior/AI
from toontown.building import DistributedToonHallInterior/AI
from toontown.building import DistributedSuitInterior/AI
from toontown.building import DistributedHQInterior/AI
from toontown.building import DistributedGagshopInterior/AI
from toontown.building import DistributedPetshopInterior/AI
from toontown.building import DistributedKartShopInterior/AI
from toontown.building import DistributedDoor/AI
from toontown.building import DistributedAnimDoor/AI
from toontown.estate import DistributedHouseDoor/AI
from toontown.coghq import DistributedCogHQDoor/AI
from toontown.coghq import DistributedSellbotHQDoor/AI
from toontown.toon import DistributedNPCToonBase/AI
from toontown.toon import DistributedNPCToon/AI
from toontown.toon import DistributedNPCSpecialQuestGiver/AI
from toontown.toon import DistributedNPCFlippyInToonHall/AI
from toontown.toon import DistributedNPCScientist/AI
from toontown.toon import DistributedNPCClerk/AI
from toontown.toon import DistributedNPCTailor/AI
from toontown.toon import DistributedNPCBlocker/AI
from toontown.toon import DistributedNPCFisherman/AI
from toontown.toon import DistributedNPCPartyPerson/AI
from toontown.toon import DistributedNPCPetclerk/AI
from toontown.toon import DistributedNPCKartClerk/AI
from toontown.building import DistributedKnockKnockDoor/AI
from toontown.building import DistributedElevator/AI
from toontown.building import DistributedElevatorFSM/AI
from toontown.building import DistributedElevatorExt/AI
from toontown.building import DistributedElevatorInt/AI
from toontown.coghq import DistributedFactoryElevatorExt/AI
from toontown.coghq import DistributedMintElevatorExt/AI
from toontown.coghq import DistributedLawOfficeElevatorExt/AI
from toontown.coghq import DistributedLawOfficeElevatorInt/AI
from toontown.building import DistributedElevatorFloor/AI
from toontown.building import DistributedBossElevator/AI
from toontown.building import DistributedVPElevator/AI
from toontown.building import DistributedCFOElevator/AI
from toontown.building import DistributedCJElevator/AI
from toontown.building import DistributedBBElevator/AI
from toontown.building import DistributedBoardingParty/AI
from toontown.building import DistributedTutorialInterior/AI
from toontown.estate import DistributedBankMgr/AI
from toontown.estate import DistributedMailbox/AI
from toontown.estate import DistributedFurnitureManager/AI
from toontown.estate import DistributedFurnitureItem/AI
from toontown.estate import DistributedBank/AI
from toontown.estate import DistributedCloset/AI
from toontown.estate import DistributedTrunk/AI
from toontown.estate import DistributedPhone/AI
from toontown.effects import DistributedFireworkShow/AI
from toontown.estate import DistributedFireworksCannon/AI
from toontown.coghq import LobbyManager/AI
from otp.level import DistributedLevel/AI
from otp.level import DistributedEntity/AI
from otp.level import DistributedInteractiveEntity/AI
from toontown.coghq import DistributedFactory/AI
from toontown.coghq import DistributedLawOffice/AI
from toontown.coghq import DistributedLawOfficeFloor/AI
from toontown.coghq import DistributedLift/AI
from toontown.coghq import DistributedDoorEntity/AI
from toontown.coghq import DistributedSwitch/AI
from toontown.coghq import DistributedButton/AI
from toontown.coghq import DistributedTrigger/AI
from toontown.coghq import DistributedCrushableEntity/AI
from toontown.coghq import DistributedCrusherEntity/AI
from toontown.coghq import DistributedStomper/AI
from toontown.coghq import DistributedStomperPair/AI
from toontown.coghq import DistributedLaserField/AI
from toontown.coghq import DistributedGolfGreenGame/AI
from toontown.coghq import DistributedSecurityCamera/AI
from toontown.coghq import DistributedMover/AI
from toontown.coghq import DistributedElevatorMarker/AI
from toontown.coghq import DistributedBarrelBase/AI
from toontown.coghq import DistributedGagBarrel/AI
from toontown.coghq import DistributedBeanBarrel/AI
from toontown.coghq import DistributedHealBarrel/AI
from toontown.coghq import DistributedGrid/AI
from toontown.coghq import ActiveCell/AI
from toontown.coghq import DirectionalCell/AI
from toontown.coghq import CrusherCell/AI
from toontown.coghq import DistributedCrate/AI
from toontown.coghq import DistributedSinkingPlatform/AI
from toontown.suit import DistributedGoon/AI
from toontown.suit import DistributedGridGoon/AI
from toontown.coghq import BattleBlocker/AI
from toontown.ai import DistributedBlackCatMgr/AI
from toontown.ai import DistributedPolarPlaceEffectMgr/AI
from toontown.ai import DistributedGreenToonEffectMgr/AI
from toontown.ai import DistributedResistanceEmoteMgr/AI
from toontown.ai import DistributedScavengerHuntTarget/AI
from toontown.ai import DistributedTrickOrTreatTarget/AI
from toontown.ai import DistributedWinterCarolingTarget/AI
from toontown.coghq import DistributedMint/AI
from toontown.coghq import DistributedMintRoom/AI
from toontown.coghq import DistributedMintBattle/AI
from toontown.coghq import DistributedStage/AI
from toontown.coghq import DistributedStageRoom/AI
from toontown.coghq import DistributedStageBattle/AI
from toontown.pets.PetDCImports/AI import *
from toontown.pets import DistributedPetProxy/AI
from toontown.coghq.InGameEditorDCImports/AI import *
from toontown.distributed import ToontownDistrict/AI
from toontown.distributed import ToontownDistrictStats/AI
from toontown.racing import DistributedVehicle/AI
from toontown.racing import DistributedStartingBlock/AI
from toontown.racing import DistributedRace/AI
from toontown.racing import DistributedKartPad/AI
from toontown.racing import DistributedRacePad/AI
from toontown.racing import DistributedViewPad/AI
from toontown.racing import DistributedStartingBlock/AI
from toontown.racing import DistributedLeaderBoard/AI
from toontown.racing import DistributedGag/AI
from toontown.racing import DistributedProjectile/AI
from toontown.racing.DistributedStartingBlock/AI import DistributedViewingBlock/AI
from toontown.uberdog.DistributedDeliveryManager/AI/UD import DistributedDeliveryManager/AI/UD
from toontown.uberdog.DistributedDataStoreManager/AI/UD import DistributedDataStoreManager/AI/UD
from toontown.suit import DistributedLawbotBoss/AI
from toontown.coghq import DistributedLawbotBossGavel/AI
from toontown.suit import DistributedLawbotBossSuit/AI
from toontown.coghq import DistributedLawbotCannon/AI
from toontown.coghq import DistributedLawbotChair/AI
from toontown.estate import DistributedLawnDecor/AI
from toontown.estate import DistributedGardenPlot/AI
from toontown.estate import DistributedGardenBox/AI
from toontown.estate import DistributedFlower/AI
from toontown.estate import DistributedGagTree/AI
from toontown.estate import DistributedStatuary/AI
from toontown.estate import DistributedToonStatuary/AI
from toontown.estate import DistributedChangingStatuary/AI
from toontown.estate import DistributedAnimatedStatuary/AI
from toontown.estate import DistributedPlantBase/AI
from toontown.estate import DistributedLawnDecor/AI
from toontown.minigame import DistributedTravelGame/AI
from toontown.minigame import DistributedPairingGame/AI
from toontown.minigame import DistributedVineGame/AI
from toontown.golf import DistributedPhysicsWorld/AI
from toontown.golf import DistributedGolfHole/AI
from toontown.golf import DistributedGolfCourse/AI
from toontown.parties import DistributedParty/AI
from toontown.parties import DistributedPartyActivity/AI
from toontown.parties import DistributedPartyTeamActivity/AI
from toontown.parties import DistributedPartyCannon/AI
from toontown.parties import DistributedPartyCannonActivity/AI
from toontown.parties import DistributedPartyCatchActivity/AI
from toontown.parties import DistributedPartyWinterCatchActivity/AI
from toontown.parties import DistributedPartyCogActivity/AI
from toontown.parties import DistributedPartyWinterCogActivity/AI
from toontown.parties import DistributedPartyFireworksActivity/AI
from toontown.parties import DistributedPartyDanceActivityBase/AI
from toontown.parties import DistributedPartyDanceActivity/AI
from toontown.parties import DistributedPartyDance20Activity/AI
from toontown.parties import DistributedPartyValentineDanceActivity/AI
from toontown.parties import DistributedPartyValentineDance20Activity/AI
from toontown.parties import DistributedPartyTrampolineActivity/AI
from toontown.parties import DistributedPartyValentineTrampolineActivity/AI
from toontown.parties import DistributedPartyVictoryTrampolineActivity/AI
from toontown.parties import DistributedPartyWinterTrampolineActivity/AI
from toontown.parties import DistributedPartyTugOfWarActivity/AI
from toontown.parties import DistributedPartyJukeboxActivityBase/AI
from toontown.parties import DistributedPartyJukeboxActivity/AI
from toontown.parties import DistributedPartyJukebox40Activity/AI
from toontown.parties import DistributedPartyValentineJukeboxActivity/AI
from toontown.parties import DistributedPartyValentineJukebox40Activity/AI
from toontown.friends import TTPlayerFriendsManager/UD
from toontown.friends import TTOffFriendsManager/UD
from toontown.uberdog import TTSpeedchatRelay/UD
from toontown.safezone import DistributedGolfKart/AI
from toontown.safezone import DistributedPicnicBasket/AI
from toontown.distributed import DistributedTimer/AI
from toontown.suit import DistributedBossbotBoss/AI
from toontown.coghq import DistributedCogKart/AI
from toontown.coghq import DistributedCountryClub/AI
from toontown.coghq import DistributedCountryClubRoom/AI
from toontown.coghq import DistributedMoleField/AI
from toontown.coghq import DistributedCountryClubBattle/AI
from toontown.building import DistributedClubElevator/AI
from toontown.coghq import DistributedMaze/AI
from toontown.battle import DistributedBattleWaiters/AI
from toontown.coghq import DistributedFoodBelt/AI
from toontown.coghq import DistributedBanquetTable/AI
from toontown.battle import DistributedBattleDiners/AI
from toontown.battle import DistributedBattleCogs/AI
from toontown.coghq import DistributedGolfSpot/AI
from toontown.minigame import DistributedIceGame/AI
from toontown.minigame import DistributedCogThiefGame/AI
from toontown.minigame import DistributedTwoDGame/AI
from toontown.safezone import DistributedPicnicTable/AI
from toontown.safezone import DistributedChineseCheckers/AI
from toontown.safezone import DistributedCheckers/AI
from toontown.safezone import DistributedFindFour/AI
from toontown.uberdog.DistributedMailManager/AI/UD import DistributedMailManager/AI/UD
from toontown.uberdog.DistributedPartyManager/AI/UD import DistributedPartyManager/AI/UD
from toontown.rpc.AwardManager/UD import AwardManager/UD
from toontown.uberdog.DistributedCpuInfoMgr/AI/UD import DistributedCpuInfoMgr/AI/UD
from toontown.uberdog.DistributedSecurityMgr/AI/UD import DistributedSecurityMgr/AI/UD
from toontown.rpc.RATManager/UD import RATManager/UD
from toontown.uberdog.DistributedInGameNewsMgr/AI/UD import DistributedInGameNewsMgr/AI/UD
from toontown.uberdog.DistributedWhitelistMgr/AI/UD import DistributedWhitelistMgr/AI/UD
from toontown.uberdog import TTGameServicesManager/UD
from toontown.uberdog import TTOffChatManager/UD
from toontown.coderedemption.TTCodeRedemptionMgr/AI/UD import TTCodeRedemptionMgr/AI/UD
from toontown.distributed.NonRepeatableRandomSourceAI import NonRepeatableRandomSourceAI
from toontown.distributed.NonRepeatableRandomSourceUD import NonRepeatableRandomSourceUD
from toontown.ai.DistributedPhaseEventMgr/AI import DistributedPhaseEventMgr/AI
from toontown.ai.DistributedHydrantZeroMgr/AI import DistributedHydrantZeroMgr/AI
from toontown.ai.DistributedMailboxZeroMgr/AI import DistributedMailboxZeroMgr/AI
from toontown.ai.DistributedTrashcanZeroMgr/AI import DistributedTrashcanZeroMgr/AI
from toontown.ai import DistributedSillyMeterMgr/AI
from toontown.cogdominium import DistributedCogdoInterior/AI
from toontown.cogdominium import DistributedCogdoBattleBldg/AI
from toontown.cogdominium import DistributedCogdoElevatorExt/AI
from toontown.cogdominium import DistributedCogdoElevatorInt/AI
from toontown.cogdominium import DistributedCogdoBarrel/AI
from toontown.cogdominium import DistCogdoGame/AI
from toontown.cogdominium import DistCogdoLevelGame/AI
from toontown.cogdominium import DistCogdoBoardroomGame/AI
from toontown.cogdominium import DistCogdoCraneGame/AI
from toontown.cogdominium import DistCogdoMazeGame/AI
from toontown.cogdominium import DistCogdoFlyingGame/AI
from toontown.cogdominium import DistCogdoCrane/AI
from toontown.cogdominium import DistCogdoCraneMoneyBag/AI
from toontown.cogdominium import DistCogdoCraneCog/AI
from toontown.spellbook import TTOffMagicWordManager/AI

typedef uint8 bool;

typedef uint64 DoId;

typedef DoId DoIdList[];

struct AvatarPendingDel {
  uint64 Avatar;
  uint64 date;
};

dclass Account {
  uint64[] ACCOUNT_AV_SET required db;
  uint64 ESTATE_ID db;
  AvatarPendingDel ACCOUNT_AV_SET_DEL[] db;
  string CREATED db;
  string LAST_LOGIN db;
  string ACCOUNT_ID db;
  string ACCESS_LEVEL db;
};

struct BarrierData {
  uint64 context;
  string name;
  uint64 avIds[];
};

dclass DistributedObject {
  setBarrierData(BarrierData []) broadcast ram;
  setBarrierReady(uint64) airecv clsend;
  execCommand(string, uint64, uint64, uint64);
  broadcastMessage() broadcast;
};

dclass DistributedTestObject : DistributedObject {
  uint64 AutoInterest[];
  setParentingRules(string, string) broadcast ram;
  setRequiredField(uint64) required broadcast ram;
  setB(uint64) broadcast;
  setBA(uint64) broadcast airecv;
  setBO(uint64) broadcast ownsend;
  setBR(uint64) broadcast ram;
  setBRA(uint64) broadcast ram airecv;
  setBRO(uint64) broadcast ram ownsend;
  setBROA(uint64) broadcast ram ownsend airecv;
};

struct OSInfo {
  string name;
  int64 platform;
  int64 major;
  int64 minor;
};

struct CPUSpeed {
  int64/1000 maxSpeed;
  int64/1000 currentSpeed;
};

dclass TimeManager : DistributedObject {
  requestServerTime(uint8) airecv clsend;
  serverTime(uint8, int64, uint64);
  setDisconnectReason(uint8) airecv clsend;
  setExceptionInfo(string(0-1024)) airecv clsend;
  setSignature(string(0-1024), char [16], char [16]) airecv clsend;
  setFrameRate(uint64/10, uint64/1000, uint64, string(0-256), uint64/10, uint64/10, string(0-256), uint64, uint64, uint64/10, uint64/10, uint64/10, uint64, OSInfo, CPUSpeed, uint64, uint64, string(0-256)) airecv clsend;
  setCpuInfo(string(0-1024), string) airecv clsend;
  checkForGarbageLeaks(bool) airecv clsend;
  setNumAIGarbageLeaks(uint64);
  setClientGarbageLeak(uint64, string(0-1024)) airecv clsend;
  checkAvOnDistrict(uint64, DoId) clsend airecv;
  checkAvOnDistrictResult(uint64, DoId, bool);
};

dclass ObjectServer {
  setName(string) airecv ram required;
  setDcHash(uint64) ram required;
  setDateCreated(uint64) airecv;
};

dclass DistributedDirectory : DistributedObject {
  setParentingRules(string, string) broadcast ram;
};

dclass DistributedDistrict : DistributedObject {
  setName(string) required broadcast ram;
  setAvailable(uint8) required broadcast ram;
};

dclass DistributedNode : DistributedObject {
  setParentStr(blob) broadcast ram ownsend airecv;
  setParent(uint64) broadcast ram ownsend airecv;
  setX(int64/10) broadcast ram ownsend airecv;
  setY(int64/10) broadcast ram ownsend airecv;
  setZ(int64/10) broadcast ram ownsend airecv;
  setH(int64%360/10) broadcast ram ownsend airecv;
  setP(int64%360/10) broadcast ram ownsend airecv;
  setR(int64%360/10) broadcast ram ownsend airecv;
  setPos : setX, setY, setZ;
  setHpr : setH, setP, setR;
  setPosHpr : setX, setY, setZ, setH, setP, setR;
  setXY : setX, setY;
  setXZ : setX, setZ;
  setXYH : setX, setY, setH;
  setXYZH : setX, setY, setZ, setH;
};

dclass DistributedSmoothNode : DistributedNode {
  setComponentL(uint64) broadcast ram ownsend airecv;
  setComponentX(int64/10) broadcast ram ownsend airecv;
  setComponentY(int64/10) broadcast ram ownsend airecv;
  setComponentZ(int64/10) broadcast ram ownsend airecv;
  setComponentH(int64%360/10) broadcast ram ownsend airecv;
  setComponentP(int64%360/10) broadcast ram ownsend airecv;
  setComponentR(int64%360/10) broadcast ram ownsend airecv;
  setComponentT(int64) broadcast ram ownsend airecv;
  setSmStop : setComponentT;
  setSmH : setComponentH, setComponentT;
  setSmZ : setComponentZ, setComponentT;
  setSmXY : setComponentX, setComponentY, setComponentT;
  setSmXZ : setComponentX, setComponentZ, setComponentT;
  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;
  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;
  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;
  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;
  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  clearSmoothing(int8) broadcast ownsend;
  suggestResync(uint64, int64, int64, int64, uint64, uint64/100) ownrecv clsend;
  returnResync(uint64, int64, int64, uint64, uint64/100) ownrecv clsend;
};

dclass DistributedCartesianGrid : DistributedNode {
  setCellWidth(uint64) required broadcast ram;
  setParentingRules(string, string) broadcast ram;
};

struct Fixture {
  int64/10 x;
  int64/10 y;
  int64/10 z;
  int64/10 h;
  int64/10 p;
  int64/10 r;
  string state;
};

dclass DistributedCamera : DistributedNode {
  setCamParent(uint64) required broadcast ram ownsend airecv;
  setFixtures(Fixture []) required broadcast ram ownsend airecv;
};

struct TalkModification {
  uint64 offset;
  uint64 size;
};

dclass TalkPath_owner {
  setTalk(uint64, uint64, string(0-256), string(0-400), TalkModification [], uint8) broadcast ownsend;
};

dclass TalkPath_whisper {
  setTalkWhisper(uint64, uint64, string(0-256), string(0-400), TalkModification [], uint8) ownrecv clsend;
};

dclass TalkPath_group {
  setTalkGroup(uint64, uint64, string(0-256), string(0-400), TalkModification [], uint8) clsend airecv;
};

dclass TalkPath_account {
  setTalkAccount(uint64, uint64, string(0-256), string(0-400), TalkModification [], uint8) airecv clsend;
};

dclass AvatarHandle : TalkPath_whisper {
};

dclass DistributedAvatar : DistributedSmoothNode, TalkPath_owner, TalkPath_whisper {
  setName(string = "Avatar") required broadcast db airecv;
  friendsNotify(int64, int8) ownrecv airecv clsend;
  checkAvOnShard(uint64) clsend airecv;
  confirmAvOnShard(uint64, int8);
};

struct Friend {
  uint64 friendId;
  uint8 friendCode;
}

dclass DistributedPlayer : DistributedAvatar {
  arrivedOnDistrict(uint64) ownrecv ram;
  setAccountName(string = "") required ownrecv db;
  setWhisperFrom(uint64, string(0-256), uint64) ownrecv clsend;
  setWhisperWLFrom(uint64, string(0-256), uint64) ownrecv clsend;
  setWhisperSCFrom(uint64, uint64) ownrecv clsend;
  setWhisperSCCustomFrom(uint64, uint64) ownrecv clsend;
  setWhisperSCEmoteFrom(uint64, uint64) ownrecv clsend;
  setSystemMessage(uint64, string(0-256)) ownrecv;
  setCommonChatFlags(uint8) broadcast ownrecv ram airecv;
  setWhitelistChatFlags(uint8) broadcast ownrecv ram airecv;
  setSC(uint64) broadcast ownsend airecv;
  setSCCustom(uint64) broadcast ownsend airecv;
  setFriendsList(Friend[] = []) ownrecv required db airecv;
  setDISLname(string) broadcast ownrecv ram;
  setDISLid(uint64 = 0) broadcast ownrecv ram db airecv required;
  OwningAccount(uint64);
  WishName(string = "") db ram;
  WishNameState(string = "LOCKED") db ram;
  setPreviousAccess(uint8 = 0) required db airecv;
  setAccess(uint8 = 2) broadcast ownrecv required ram airecv;
  setAccessLevel(uint64 = 0) ownrecv required airecv;
  setAsGM(bool = 0) required ram broadcast ownrecv airecv;
};

dclass MagicWordManager : DistributedObject {
  setMagicWord(string, uint64, uint64, string(0-256)) airecv clsend;
  setMagicWordResponse(string) airecv;
  setWho(uint64[]) airecv clsend;
};

dclass OtpAvatarManager : DistributedObject {
  online();
  requestAvatarList(uint64) airecv clsend;
  rejectAvatarList(uint64);
  avatarListResponse(blob);
  requestAvatarSlot(uint64, uint64, uint8) clsend airecv;
  rejectAvatarSlot(uint64, uint64, uint8);
  avatarSlotResponse(uint64, uint8);
  requestPlayAvatar(uint64, uint64, uint64) clsend airecv;
  rejectPlayAvatar(uint64, uint64);
  playAvatarResponse(uint64, uint64, uint8, uint8);
  rejectCreateAvatar(uint64);
  createAvatarResponse(uint64, uint64, uint8, uint8);
  requestRemoveAvatar(uint64, uint64, uint64, string(0-256)) airecv clsend;
  rejectRemoveAvatar(uint64);
  removeAvatarResponse(uint64, uint64);
  requestShareAvatar(uint64, uint64, uint64, uint8) airecv clsend;
  rejectShareAvatar(uint64);
  shareAvatarResponse(uint64, uint64, uint8);
};

dclass DistributedChatManager : DistributedObject {
  online();
  adminChat(uint64, string);
  setAvatarLocation(uint64, uint64, uint64);
  setAvatarCrew(uint64, uint64);
  setAvatarGuild(uint64, uint64);
  chatParentId(uint64) airecv clsend;
  chatZoneId(uint64) airecv clsend;
  chatFace(uint64) airecv clsend;
  chatEmote(uint64) airecv clsend;
  chatEmoteTarget(uint64) airecv clsend;
  chatIndex(uint64) airecv clsend;
  chatString(string(0-256)) airecv clsend;
  chatToAvatarIndex : chatZoneId, chatIndex;
  chatParentZoneFaceEmoteWithTargetIndex : chatParentId, chatZoneId, chatFace, chatEmote, chatEmoteTarget, chatIndex;
  chatToAvatarString : chatZoneId, chatString;
  chatParentZoneFaceEmoteWithTargetString : chatParentId, chatZoneId, chatFace, chatEmote, chatEmoteTarget, chatString;
  speedChatTo(uint64) airecv clsend;
  speedChatFrom(uint64, uint64);
  speedChatCustomTo(uint64) airecv clsend;
  speedChatCustomFrom(uint64, uint64);
  whisperSCTo(uint64, uint64) airecv clsend;
  whisperSCFrom(uint64, uint64);
  whisperSCCustomTo(uint64, uint64) airecv clsend;
  whisperSCCustomFrom(uint64, uint64);
  whisperSCEmoteTo(uint64, uint64) airecv clsend;
  whisperSCEmoteFrom(uint64, uint64);
  whisperIgnored(uint64);
};

dclass FriendManager : DistributedObject {
  friendQuery(int64) airecv clsend;
  cancelFriendQuery(int64) airecv clsend;
  inviteeFriendConsidering(int8, int64) airecv clsend;
  inviteeFriendResponse(int8, int64) airecv clsend;
  inviteeAcknowledgeCancel(int64) airecv clsend;
  friendConsidering(int8, int64);
  friendResponse(int8, int64);
  inviteeFriendQuery(int64, string, blob, int64);
  inviteeCancelFriendQuery(int64);
  requestSecret() airecv clsend;
  requestSecretResponse(int8, string);
  submitSecret(string(0-256)) airecv clsend;
  submitSecretResponse(int8, int64);
};

struct FriendInfo {
  string avatarName;
  uint64 avatarId;
  string playerName;
  uint8 onlineYesNo;
  uint8 openChatEnabledYesNo;
  uint8 openChatFriendshipYesNo;
  uint8 wlChatEnabledYesNo;
  string location;
  string sublocation;
  uint64 timestamp;
};

struct AvatarFriendInfo {
  string avatarName;
  string playerName;
  uint64 playerId;
  uint8 onlineYesNo;
  uint8 openChatEnabledYesNo;
  uint8 openChatFriendshipYesNo;
  uint8 wlChatEnabledYesNo;
};

struct MemberInfo {
  uint64 avatarId;
  string avatarName;
  uint8 avatarRank;
  uint8 avatarOnline;
  uint64 bandManagerId;
  uint64 bandId;
};

struct leaderBoardRecordResponces {
  char found;
  uint64 id;
  string text;
  int64 value;
};

struct leaderBoardRecord {
  uint64 id;
  string text;
  int64 value;
};

dclass LeaderBoardReceiver {
  getTopTenResponce(string, leaderBoardRecord []);
  getValuesResponce(string, leaderBoardRecordResponces []);
};

dclass LeaderBoard : LeaderBoardReceiver {
  setValue(string [], uint64, string, int64);
  alterValue(string [], uint64, string, int64);
  setHighScore(string [], uint64, string, int64);
  getValues(string, uint64 []);
  getTopTen(string);
  getValuesRespondTo(string, uint64 [], uint64);
  getTopTenRespondTo(string, uint64);
};

dclass GuildManager : DistributedObject, LeaderBoardReceiver, TalkPath_group {
  online();
  guildRejectInvite(uint64, uint64);
  invitationFrom(uint64, string, uint64, string);
  requestInvite(uint64) airecv clsend;
  memberList() airecv clsend;
  createGuild() airecv clsend;
  acceptInvite() airecv clsend;
  declineInvite() airecv clsend;
  setWantName(string(0-256)) airecv clsend;
  removeMember(uint64) airecv clsend;
  changeRank(uint64, uint8) airecv clsend;
  changeRankAvocate(uint64) airecv clsend;
  statusRequest() airecv clsend;
  requestLeaderboardTopTen() airecv clsend;
  guildStatusUpdate(uint64, string(0-256), uint8);
  guildNameReject(uint64);
  guildNameChange(string, uint8);
  receiveMember(MemberInfo);
  receiveMembersDone();
  guildAcceptInvite(uint64);
  guildDeclineInvite(uint64);
  updateRep(uint64, uint64);
  leaderboardTopTen(leaderBoardRecord []);
  recvAvatarOnline(uint64, string, uint64, uint64);
  recvAvatarOffline(uint64, string);
  sendChat(string(0-256), uint8, uint64) airecv clsend;
  sendWLChat(string(0-256), uint8, uint64) airecv clsend;
  sendSC(uint64) airecv clsend;
  sendSCQuest(uint64, uint64, uint64) airecv clsend;
  recvChat(uint64, string, uint8, uint64);
  recvWLChat(uint64, string, uint8, uint64);
  recvSC(uint64, uint64);
  recvSCQuest(uint64, uint64, uint64, uint64);
  sendTokenRequest() airecv clsend;
  recvTokenGenerated(string);
  recvTokenInviteValue(string, int8);
  sendTokenForJoinRequest(string(0-256), string(0-256)) airecv clsend;
  recvTokenRedeemMessage(string);
  recvTokenRedeemedByPlayerMessage(string);
  sendTokenRValue(string(0-256), int8) airecv clsend;
  sendPermToken() airecv clsend;
  sendNonPermTokenCount() airecv clsend;
  recvPermToken(string);
  recvNonPermTokenCount(uint8);
  sendClearTokens(uint8) airecv clsend;
  sendAvatarBandId(uint64, uint64, uint64);
  recvMemberAdded(MemberInfo, uint64, string);
  notifyGuildKicksMaxed();
  recvMemberRemoved(uint64, uint64, string, string);
  recvMemberUpdateName(uint64, string);
  recvMemberUpdateRank(uint64, uint64, string, string, uint8, bool);
  recvMemberUpdateBandId(uint64, uint64, uint64);
  avatarOnline(uint64, uint64);
  avatarOffline(uint64);
  reflectTeleportQuery(uint64, uint64, uint64, uint64, uint64) clsend airecv;
  teleportQuery(uint64, uint64, uint64, uint64, uint64);
  reflectTeleportResponse(uint64, int8, uint64, uint64, uint64) clsend airecv;
  teleportResponse(uint64, int8, uint64, uint64, uint64);
  requestGuildMatesList(uint64, uint64, uint64);
  updateAvatarName(uint64, string);
  avatarDeleted(uint64);
};

dclass AvatarFriendsManager : DistributedObject {
  online();
  requestInvite(uint64) airecv clsend;
  friendConsidering(uint64) airecv clsend;
  invitationFrom(uint64, string);
  retractInvite(uint64);
  rejectInvite(uint64, uint64);
  requestRemove(uint64) airecv clsend;
  rejectRemove(uint64, uint64);
  updateAvatarFriend(uint64, AvatarFriendInfo);
  removeAvatarFriend(uint64);
  updateAvatarName(uint64, string);
  avatarOnline(uint64, uint64, string, bool, bool, string, string);
  avatarOffline(uint64);
};

dclass PlayerFriendsManager : DistributedObject, TalkPath_account {
  requestInvite(uint64, uint64, uint8) airecv clsend;
  invitationFrom(uint64, string);
  retractInvite(uint64);
  invitationResponse(uint64, uint64, uint64);
  requestDecline(uint64, uint64) airecv clsend;
  requestDeclineWithReason(uint64, uint64, uint64) airecv clsend;
  requestRemove(uint64, uint64) airecv clsend;
  secretResponse(string);
  rejectSecret(string);
  rejectUseSecret(string);
  updatePlayerFriend(uint64, FriendInfo, uint8);
  removePlayerFriend(uint64);
};

dclass SnapshotDispatcher : DistributedObject {
  online();
  requestRender(uint64);
  avatarDeleted(uint64);
  requestNewWork(uint64);
  errorFetchingAvatar(uint64, uint64);
  errorRenderingAvatar(uint64, uint64);
  renderSuccessful(uint64, uint64);
};

dclass SnapshotRenderer : DistributedObject {
  online();
  requestRender(uint64, uint64, string);
};

dclass SpeedchatRelay : DistributedObject, TalkPath_account {
  forwardSpeedchat(uint64, uint8, uint64 [], uint64, string(0-256), uint8) clsend;
};

struct PotentialAvatar {
  uint64 avNum;
  string avName;
  string avDNA;
  uint8 avPosition;
  uint8 nameState;
};

dclass GameServicesManager : DistributedObject {
  login(string) clsend;
  acceptLogin();
  requestAvatarList() clsend;
  avatarListResponse(PotentialAvatar[]);
  requestRemoveAvatar(uint64) clsend;
  requestPlayAvatar(uint64) clsend;
  receiveAccountDays(uint64);
}

dclass CentralLogger : DistributedObject {
  sendMessage(string(0-256), string(0-1024), uint64, uint64) clsend;
  logAIGarbage() airecv;
};

dclass SettingsMgr : DistributedObject {
  requestAllChangedSettings() airecv clsend;
  settingChange(string, string) airecv;
};

dclass StatusDatabase : DistributedObject {
  requestOfflineAvatarStatus(uint64 []) airecv clsend;
  recvOfflineAvatarStatus(uint64, uint64);
};

dclass CallbackObject {
  callback(uint64, bool, uint8);
};

struct GiftItem {
  blob Item;
  string giftTag;
};

struct gardenSpecial {
  uint8 index;
  uint8 count;
};

struct simpleMail {
  uint64 msgId;
  uint64 senderId;
  uint64 year;
  uint8 month;
  uint8 day;
  string body;
};

struct invite {
  uint64 inviteKey;
  uint64 partyId;
  uint8 status;
};

struct decoration {
  uint8 decorId;
  uint8 x;
  uint8 y;
  uint8 h;
};

struct activity {
  uint8 activityId;
  uint8 x;
  uint8 y;
  uint8 h;
};

struct party {
  uint64 partyId;
  uint64 hostId;
  uint64 startYear;
  uint8 startMonth;
  uint8 startDay;
  uint8 startHour;
  uint8 startMinute;
  uint64 endYear;
  uint8 endMonth;
  uint8 endDay;
  uint8 endHour;
  uint8 endMinute;
  uint8 isPrivate;
  uint8 inviteTheme;
  activity activities[];
  decoration decors[];
  uint8 status;
};

struct partyReply {
  uint64 inviteeId;
  uint8 status;
};

struct repliesForOneParty {
  uint64 partyId;
  partyReply partyReplies[];
};

struct publicPartyInfo {
  uint64 shardId;
  uint64 zoneId;
  uint8 numberOfGuests;
  string hostName;
  uint8[] activityIds;
  uint64 minLeft;
};

struct jukeboxSongInfo {
  uint8/10 phase;
  string fileName;
};

struct partyCloudColor {
  uint64 cloudNumber;
  uint8/100 r;
  uint8/100 g;
  uint8/100 b;
};

struct datetime {
  uint64 year;
  uint8 month;
  uint8 day;
  uint8 hour;
  uint8 minutes;
  uint8 seconds;
};

dclass ToontownDistrict : DistributedDistrict {
  setParentingRules(string, string) broadcast ram;
  allowAHNNLog(bool) broadcast required ram;
};

dclass ToontownDistrictStats : DistributedObject {
  settoontownDistrictId(uint64) broadcast required ram;
  setAvatarCount(uint64) broadcast required ram;
  setNewAvatarCount(uint64) broadcast required ram;
  setStats : setAvatarCount, setNewAvatarCount;
};

dclass WelcomeValleyManager : DistributedObject {
  clientSetZone(uint64) airecv clsend;
  requestZoneIdMessage(uint64, uint64) airecv clsend;
  requestZoneIdResponse(uint64, uint64);
};

dclass DistributedAnimatedProp : DistributedObject {
  setPropId(uint64) required broadcast ram;
  setAvatarInteract(uint64) required broadcast ram;
  requestInteract() airecv clsend;
  rejectInteract();
  requestExit() airecv clsend;
  avatarExit(uint64) broadcast;
  setState(string, int64) required broadcast ram;
};

typedef int64 pair16[2];

dclass DistributedToon : DistributedPlayer {
  setDNAString(blob) required broadcast ownrecv db;
  setGM(uint8 = 0) required broadcast ownrecv db;
  setMaxBankMoney(int64 = 12000) required broadcast ownrecv db;
  setBankMoney(int64 = 0) required broadcast ownrecv db;
  setMaxMoney(int64 = 40) required broadcast ownrecv db;
  setMoney(int64 = 0) required broadcast ownrecv db;
  setMaxHp(int64 = 15) required broadcast ownrecv db;
  setHp(int64 = 15) required broadcast ownrecv db;
  toonUp(uint64) broadcast ownrecv;
  takeDamage(uint64) broadcast ownrecv;
  setBattleId(uint64 = 0) required broadcast ram;
  setExperience(blob = [0 * 14]) required ownrecv db;
  setMaxCarry(uint8 = 20) required ownrecv db;
  setTrackAccess(uint64[] = [0, 0, 0, 0, 1, 1, 0]) required broadcast ownrecv db;
  setTrackProgress(int8 = -1, uint64 = 0) required ownrecv db;
  setTrackBonusLevel(int8[] = [-1, -1, -1, -1, -1, -1, -1]) required broadcast ownrecv db;
  setInventory(blob = [0 * 7, 0 * 7, 0 * 7, 0 * 7, 1, 0 * 6, 1, 0 * 6, 0 * 7]) required ownrecv db;
  setMaxNPCFriends(uint64 = 16) required ownrecv db;
  setNPCFriendsDict(Friend[] = []) required ownrecv db;
  setDefaultShard(uint64 = 0) required ownrecv db;
  setDefaultZone(uint64 = 0) required ownrecv db;
  setShtickerBook(blob = []) required ownrecv db;
  setZonesVisited(uint64[] = [2000]) required ownrecv db;
  setHoodsVisited(uint64[] = [2000]) required ownrecv db;
  setInterface(blob = []) required ownrecv db;
  setLastHood(uint64 = 0) required ownrecv db;
  setTutorialAck(uint8 = 0) required ownrecv db;
  setMaxClothes(uint64 = 10) required ownrecv db;
  setClothesTopsList(uint8[] = []) required ownrecv db;
  setClothesBottomsList(uint8[] = []) required ownrecv db;
  setMaxAccessories(uint64 = 0) required ownrecv db;
  setHatList(uint8[] = []) required ownrecv db;
  setGlassesList(uint8[] = []) required ownrecv db;
  setBackpackList(uint8[] = []) required ownrecv db;
  setShoesList(uint8[] = []) required ownrecv db;
  setHat(uint8 = 0, uint8 = 0, uint8 = 0) required broadcast db ownrecv;
  setGlasses(uint8 = 0, uint8 = 0, uint8 = 0) required broadcast db ownrecv;
  setBackpack(uint8 = 0, uint8 = 0, uint8 = 0) required broadcast db ownrecv;
  setShoes(uint8 = 0, uint8 = 0, uint8 = 0) required broadcast db ownrecv;
  setGardenSpecials(gardenSpecial [] = []) required ownrecv db airecv;
  setEarnedExperience(uint64[]) ownrecv;
  setTunnelIn(int64, int64/10, int64/10, int64/10, int64/100, int64/100) ownsend broadcast;
  setTunnelOut(int64, int64/10, int64/10, int64/10, int64/10, int64/100, int64/100) ownsend broadcast;
  setAnimState(char [0-1024], int64/1000, int64) broadcast ram ownsend airecv;
  setEmoteState(int64, int64/1000, int64) broadcast ram ownsend;
  setEmoteAccess(uint8[] = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) required ownrecv db;
  setCustomMessages(uint64[] = []) required ownrecv db;
  setSleepAutoReply(uint64) broadcast clsend ownrecv;
  setResistanceMessages(pair16 [] = []) required ownrecv db;
  setPetTrickPhrases(uint8[] = [0]) required ownrecv db;
  setCatalogSchedule(uint64 = 0, uint64 = 0) required ownrecv db;
  setCatalog(blob = [], blob = [], blob = []) required ownrecv db;
  setMailboxContents(blob = []) required ownrecv db;
  setDeliverySchedule(blob = []) required ownrecv db airecv;
  setGiftSchedule(blob = []) required ownrecv db airecv;
  setAwardMailboxContents(blob = []) required ownrecv db;
  setAwardSchedule(blob = []) required ownrecv db airecv;
  setAwardNotify(uint8 = 0) required ownrecv db;
  setCatalogNotify(uint8 = 0, uint8 = 0) required ownrecv db;
  playSplashEffect(int64/10, int64/10, int64/10) broadcast ownsend;
  setWhisperSCToontaskFrom(uint64, uint64, uint64, uint64, uint8) ownrecv clsend;
  setSCToontask(uint64, uint64, uint64, uint8) broadcast ownsend;
  reqSCResistance(uint64, uint64 []) ownsend airecv;
  setSCResistance(uint64, uint64 []) broadcast ownrecv;
  setSpeedChatStyleIndex(uint8 = 1) required ownsend broadcast db;
  setTrophyScore(uint64) broadcast ownrecv ram;
  setTeleportAccess(uint64[] = []) required ownrecv db;
  checkTeleportAccess(uint64) airecv ownsend;
  battleSOS(uint64) ownrecv clsend;
  teleportQuery(uint64) ownrecv clsend;
  teleportResponse(uint64, int8, uint64, uint64, uint64) ownrecv clsend;
  teleportResponseToAI(uint64, int8, uint64, uint64, uint64, uint64) ownsend airecv;
  teleportGiveup(uint64) ownrecv clsend;
  teleportGreeting(uint64) broadcast ownsend;
  setCogStatus(uint64[] = [1 * 48]) required ownrecv db;
  setCogCount(uint64[] = [0 * 48]) required ownrecv db;
  setCogRadar(uint8[] = [0 * 4]) required ownrecv db;
  setBuildingRadar(uint8[] = [0 * 4]) required ownrecv db;
  setCogLevels(uint8[] = [0 * 4]) required broadcast ownrecv db;
  setCogTypes(uint8[] = [0 * 4]) required broadcast ownrecv db;
  setCogParts(uint64[] = [0 * 4]) required broadcast ownrecv db;
  setCogMerits(uint64[] = [0 * 4]) required ownrecv db;
  setCogIndex(int8) broadcast ram;
  setDisguisePageFlag(int8) ownrecv;
  setSosPageFlag(int8) ownrecv;
  setHouseId(uint64 = 0) required ownrecv db;
  setQuests(uint64[] = []) required broadcast ownrecv db;
  setQuestHistory(uint64[] = []) required ownrecv db;
  setRewardHistory(uint8 = 0, uint64[] = []) required ownrecv db;
  setQuestCarryLimit(uint8 = 1) required ownrecv db;
  requestDeleteQuest(uint64[]) ownsend airecv;
  setCheesyEffect(int64 = 0, uint64 = 0, uint64 = 0) required broadcast ownrecv db;
  setGhostMode(uint8) broadcast ownrecv ram;
  setPosIndex(uint8 = 0) required ownrecv db;
  setFishCollection(uint8[] = [], uint8[] = [], uint64[] = []) required ownrecv db;
  setMaxFishTank(uint8 = 20) required ownrecv db;
  setFishTank(uint8[] = [], uint8[] = [], uint64[] = []) required ownrecv db;
  setFishingRod(uint8 = 0) required broadcast ownrecv db;
  setFishingTrophies(uint8[] = []) required ownrecv db;
  setFlowerCollection(uint8[] = [], uint8[] = []) required ownrecv db;
  setFlowerBasket(uint8[] = [], uint8[] = []) required ownrecv db;
  setMaxFlowerBasket(uint8 = 20) required ownrecv db;
  setGardenTrophies(uint8[] = []) required ownrecv db;
  setShovel(uint8 = 0) required broadcast ownrecv db;
  setShovelSkill(uint64 = 0) required ownrecv db;
  setWateringCan(uint8 = 0) required broadcast ownrecv db;
  setWateringCanSkill(uint64 = 0) required ownrecv db;
  promoteShovel(uint8) ownrecv;
  promoteWateringCan(uint8) ownrecv;
  reactivateWater() ownrecv;
  presentPie(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10, int64) broadcast ownsend;
  tossPie(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10, uint8, uint8, int64) broadcast ownsend;
  pieSplat(int64/10, int64/10, int64/10, uint8, uint8, int64) broadcast ownsend;
  setPieType(uint8) broadcast ownrecv ram;
  setNumPies(uint64) broadcast ownrecv ram;
  catalogGenClothes(uint64) broadcast ownrecv;
  catalogGenAccessories(uint64) broadcast ownrecv;
  setPetId(uint64 = 0) required broadcast ownrecv db;
  setPetMovie(uint64, uint8) ownsend airecv;
  setPetTutorialDone(uint8 = 0) required ownsend airecv db;
  setFishBingoTutorialDone(uint8 = 0) required ownsend airecv db;
  setFishBingoMarkTutorialDone(uint8 = 0) required ownsend airecv db;
  setKartBodyType(int8 = -1) required broadcast ownrecv db;
  setKartBodyColor(int8 = -1) required broadcast ownrecv db;
  setKartAccessoryColor(int8 = -1) required broadcast ownrecv db;
  setKartEngineBlockType(int8 = -1) required broadcast ownrecv db;
  setKartSpoilerType(int8 = -1) required broadcast ownrecv db;
  setKartFrontWheelWellType(int8 = -1) required broadcast ownrecv db;
  setKartBackWheelWellType(int8 = -1) required broadcast ownrecv db;
  setKartRimType(int8 = -1) required broadcast ownrecv db;
  setKartDecalType(int8 = -1) required broadcast ownrecv db;
  updateKartDNAField(int8, int8) ownsend airecv;
  addOwnedAccessory(int8) ownsend airecv;
  removeOwnedAccessory(int8) ownsend airecv;
  setTickets(uint64 = 200) required broadcast ownrecv db;
  setKartingHistory(uint8 [16] = [0 * 16]) required ownrecv db;
  setKartingTrophies(uint8 [33] = [0 * 33]) required ownrecv db;
  setKartingPersonalBest(uint64/1000 [6] = [0 * 6]) required ownrecv db;
  setKartingPersonalBest2(uint64/1000 [12] = [0 * 12]) required ownrecv db;
  setKartAccessoriesOwned(int8 [16] = [-1 * 16]) required broadcast ownrecv db;
  setCurrentKart(uint64) broadcast ownrecv ram;
  squish(uint8) ownsend airecv;
  announceBingo() broadcast ownrecv;
  trickOrTreatTargetMet(uint64) ownrecv;
  trickOrTreatMilestoneMet() ownrecv;
  winterCarolingTargetMet(uint64) ownrecv;
  setCogSummonsEarned(uint8[] = [0 * 48]) required ownrecv db;
  reqCogSummons(char [0-256], uint64) ownsend airecv;
  cogSummonsResponse(string, uint64, uint64) ownrecv;
  reqUseSpecial(int64) ownsend airecv;
  useSpecialResponse(string) ownrecv;
  setGardenStarted(uint8 = 0) required ownrecv db;
  sendToGolfCourse(uint64) ownrecv;
  setGolfHistory(uint64 [18] = [0 * 18]) required ownrecv db;
  setPackedGolfHoleBest(uint8 [18] = [0 * 18]) required ownrecv db;
  setGolfCourseBest(uint8 [3] = [0 * 3]) required ownrecv db;
  setUnlimitedSwing(uint8) broadcast ownrecv ram;
  logSuspiciousEvent(char [0-1024]) ownsend airecv;
  logMessage(char [0-1024]) ownsend airecv;
  forceLogoutWithNotify() ownrecv;
  setPinkSlips(uint8 = 0) required ownrecv db;
  setNametagStyle(uint8 = 0) broadcast required ram db;
  setMail(simpleMail []) ownrecv;
  setNumMailItems(uint64) airecv;
  setSimpleMailNotify(uint8) ownrecv airecv;
  setInvites(invite []) ownrecv airecv ram;
  setPartiesInvitedTo(party []) ownrecv airecv ram;
  setHostedParties(party []) ownrecv airecv ram;
  setPartyReplies(repliesForOneParty []) ownrecv airecv ram;
  updateInvite(uint64, uint8) ownrecv airecv;
  updateReply(uint64, uint64, uint8) ownrecv airecv;
  setPartyCanStart(uint64) ownrecv airecv;
  setPartyStatus(uint64, uint8) ownrecv airecv;
  announcePartyStarted(uint64) ownrecv;
  setNeverStartedPartyRefunded(uint64, int8, uint64) ownrecv;
  setModuleInfo(string []) airecv clsend;
  setDISLname(string) ram;
  setDISLid(uint64) ram db airecv;
  flagAv(uint64, uint64, string []) airecv ownsend;
  setEmblems(uint64[] = [0, 0]) required ownrecv db;
  setImmortalMode(uint8) broadcast ownrecv ram;
  setUnlimitedGags(uint8) broadcast ownrecv ram;
  setInstaKill(uint8) broadcast ownrecv ram;
  setRun() broadcast ownrecv ram;
  doTeleport(string hood);
};

dclass DistributedCCharBase : DistributedObject {
  setChat(uint64, uint64, uint64) broadcast;
  fadeAway() broadcast;
  setWalk(string, string, int64) required broadcast ram;
  avatarEnter() airecv clsend;
  avatarExit() airecv clsend;
  setNearbyAvatarChat(char [0-1024]) airecv clsend;
  setNearbyAvatarSC(uint64) airecv clsend;
  setNearbyAvatarSCCustom(uint64) airecv clsend;
  setNearbyAvatarSCToontask(uint64, uint64, uint64, uint8) airecv clsend;
};

dclass DistributedMickey : DistributedCCharBase {
};

dclass DistributedVampireMickey : DistributedMickey {
};

dclass DistributedWitchMinnie : DistributedMickey {
};

dclass DistributedMinnie : DistributedCCharBase {
};

dclass DistributedGoofy : DistributedCCharBase {
};

dclass DistributedDaisy : DistributedCCharBase {
};

dclass DistributedSockHopDaisy : DistributedDaisy {
};

dclass DistributedChip : DistributedCCharBase {
};

dclass DistributedPoliceChip : DistributedChip {
};

dclass DistributedDale : DistributedCCharBase {
  setFollowChip(string, string, int64, int64/100, int64/100) broadcast ram;
  setChipId(uint64) required broadcast ram;
};

dclass DistributedJailbirdDale : DistributedDale {
};

dclass DistributedDonald : DistributedCCharBase {
};

dclass DistributedFrankenDonald : DistributedDonald {
};

dclass DistributedDonaldDock : DistributedCCharBase {
};

dclass DistributedPluto : DistributedCCharBase {
};

dclass DistributedWesternPluto : DistributedPluto {
};

dclass DistributedGoofySpeedway : DistributedCCharBase {
};

dclass DistributedSuperGoofy : DistributedGoofySpeedway {
};

dclass DistributedPartyGate : DistributedObject {
  getPartyList(uint64) airecv clsend;
  partyChoiceRequest(uint64, uint64, uint64) airecv clsend;
  listAllPublicParties(publicPartyInfo []);
  partyRequestDenied(uint8);
  setParty(publicPartyInfo);
};

dclass DistributedTrolley : DistributedObject {
  setState(string, int64) broadcast ram;
  fillSlot0(uint64) broadcast ram;
  fillSlot1(uint64) broadcast ram;
  fillSlot2(uint64) broadcast ram;
  fillSlot3(uint64) broadcast ram;
  emptySlot0(uint64, int64) broadcast ram;
  emptySlot1(uint64, int64) broadcast ram;
  emptySlot2(uint64, int64) broadcast ram;
  emptySlot3(uint64, int64) broadcast ram;
  requestBoard() airecv clsend;
  rejectBoard(uint64);
  requestExit() airecv clsend;
  setMinigameZone(uint64, uint64);
};

dclass DistributedSuitPlanner : DistributedObject {
  setZoneId(uint64) required broadcast ram;
  suitListQuery() airecv clsend;
  suitListResponse(uint8[]);
  buildingListQuery() airecv clsend;
  buildingListResponse(uint8[]);
};

dclass DistributedSuitBase : DistributedObject {
  denyBattle();
  setDNAString(blob) required broadcast ram;
  setLevelDist(int64) required broadcast ram;
  setBrushOff(int64) broadcast;
  setSkelecog(uint8) required broadcast ram;
  setSkeleRevives(uint8) required broadcast ram;
  setImmuneStatus(uint8) required broadcast ram;
  setHP(int64) required broadcast ram;
};

dclass DistributedSuit : DistributedSuitBase {
  requestBattle(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) airecv clsend;
  setSPDoId(uint64) required broadcast ram;
  setPathEndpoints(uint64, uint64, uint64, uint64) required broadcast ram;
  setPathPosition(uint64, int64) required broadcast ram;
  setPathState(int8) required broadcast ram;
  debugSuitPosition(int64/10, int64, int64/10, int64/10, int64) broadcast;
};

dclass DistributedTutorialSuit : DistributedSuitBase {
  requestBattle(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) airecv clsend;
};

dclass DistributedFactorySuit : DistributedSuitBase {
  setLevelDoId(uint64) required broadcast ram;
  setCogId(uint64) required broadcast ram;
  setReserve(uint8) required broadcast ram;
  requestBattle(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) airecv clsend;
  setAlert(uint64) airecv clsend;
  setConfrontToon(uint64) broadcast;
  setStrayed() airecv clsend;
  setReturn() broadcast;
};

dclass DistributedMintSuit : DistributedFactorySuit {
};

dclass DistributedStageSuit : DistributedFactorySuit {
};

dclass DistributedBossCog : DistributedNode {
  setDNAString(blob) required broadcast db;
  setToonIds(uint64[], uint64[], uint64[]) broadcast ram;
  setBattleIds(uint8, uint64, uint64) broadcast ram;
  setArenaSide(uint8) broadcast ram;
  avatarEnter() airecv clsend;
  avatarExit() airecv clsend;
  avatarNearEnter() airecv clsend;
  avatarNearExit() airecv clsend;
  toonDied(uint64) broadcast;
  setBattleExperience(int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], uint8[], int64[], uint64[]) required broadcast ram;
  zapToon(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10, int8/100, int8/100, uint8, int64) airecv clsend;
  showZapToon(uint64, int64/10, int64/10, int64/10, int64/10, int64/10, int64/10, uint8, int64) broadcast;
  setAttackCode(uint8, uint64) broadcast;
};

dclass DistributedSellbotBoss : DistributedBossCog {
  setCagedToonNpcId(uint64) required broadcast ram;
  setDooberIds(uint64[]) broadcast ram;
  setBossDamage(uint64, uint8, int64) broadcast ram;
  setState(string) broadcast ram;
  hitBoss(uint8) airecv clsend;
  hitBossInsides() airecv clsend;
  hitToon(uint64) airecv clsend;
  finalPieSplat() airecv clsend;
  touchCage() airecv clsend;
  doStrafe(uint8, uint8) broadcast;
  cagedToonBattleThree(uint64, uint64) broadcast;
  toonPromoted(uint8(0-1));
};

dclass DistributedCashbotBoss : DistributedBossCog {
  setState(string) broadcast ram;
  setBossDamage(uint64) broadcast ram;
  setCraneSpawn(bool, uint8, uint64) broadcast ram;
  setRewardId(uint64) broadcast ram;
  applyReward() airecv clsend;
};

struct LinkPosition {
  int64/100 x;
  int64/100 y;
  int64/100 z;
};

dclass DistributedCashbotBossCrane : DistributedObject {
  setBossCogId(uint64) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setState(char, uint64) broadcast ram;
  requestControl() airecv clsend;
  requestFree() airecv clsend;
  clearSmoothing(int8) broadcast clsend;
  setCablePos(uint8, int64/100, uint64%360/100, LinkPosition [3], int64) broadcast clsend;
};

dclass DistributedCashbotBossObject : DistributedObject {
  setBossCogId(uint64) required broadcast ram;
  setObjectState(char, uint64, uint64) broadcast ram;
  requestGrab() airecv clsend;
  rejectGrab();
  requestDrop() airecv clsend;
  hitFloor() clsend;
  requestFree(int64/10, int64/10, int64/10, uint64%360/100) airecv clsend;
  hitBoss(uint64/255) airecv clsend;
  setX(int64/10) broadcast ram clsend airecv;
  setY(int64/10) broadcast ram clsend airecv;
  setZ(int64/10) broadcast ram clsend airecv;
  setH(int64%360/10) broadcast ram clsend airecv;
  setP(int64%360/10) broadcast ram clsend airecv;
  setR(int64%360/10) broadcast ram clsend airecv;
  setPos : setX, setY, setZ;
  setHpr : setH, setP, setR;
  setPosHpr : setX, setY, setZ, setH, setP, setR;
  setXY : setX, setY;
  setXZ : setX, setZ;
  setXYH : setX, setY, setH;
  setXYZH : setX, setY, setZ, setH;
  setComponentL(uint64) broadcast ram clsend airecv;
  setComponentX(int64/10) broadcast ram clsend airecv;
  setComponentY(int64/10) broadcast ram clsend airecv;
  setComponentZ(int64/10) broadcast ram clsend airecv;
  setComponentH(int64%360/10) broadcast ram clsend airecv;
  setComponentP(int64%360/10) broadcast ram clsend airecv;
  setComponentR(int64%360/10) broadcast ram clsend airecv;
  setComponentT(int64) broadcast ram clsend airecv;
  setSmStop : setComponentT;
  setSmH : setComponentH, setComponentT;
  setSmZ : setComponentZ, setComponentT;
  setSmXY : setComponentX, setComponentY, setComponentT;
  setSmXZ : setComponentX, setComponentZ, setComponentT;
  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;
  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;
  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;
  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;
  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  clearSmoothing(int8) broadcast clsend;
};

dclass DistributedCashbotBossSafe : DistributedCashbotBossObject {
  setIndex(uint8) required broadcast ram;
  requestInitial() airecv clsend;
};

dclass DistributedCashbotBossGoon : DistributedCashbotBossObject {
  requestBattle(int64/10) airecv clsend;
  requestStunned(int64/10) airecv clsend;
  setVelocity(uint8/10) broadcast ram;
  setHFov(uint8) broadcast ram;
  setAttackRadius(uint8) broadcast ram;
  setStrength(uint8) broadcast ram;
  setGoonScale(uint8/50) broadcast ram;
  setupGoon : setVelocity, setHFov, setAttackRadius, setStrength, setGoonScale;
  setTarget(int64/10, int64/10, uint64%360/100, int64) broadcast ram;
  destroyGoon() broadcast clsend airecv;
};

dclass DistributedBattleBase : DistributedObject {
  setLevelDoId(uint64) required broadcast ram;
  setBattleCellId(uint64) required broadcast ram;
  setInteractivePropTrackBonus(int8) required broadcast ram;
  setPosition(int64/10, int64/10, int64/10) required broadcast ram;
  setZoneId(uint64) required broadcast ram;
  setInitialSuitPos(int64/10, int64/10, int64/10) required broadcast ram;
  setMembers(uint64[], string, string, string, string, string, uint64[], string, string, string, string, string, int64) required broadcast ram;
  adjust(int64) broadcast;
  setMovie(int8, uint64[], uint64[], int8, int8, int8, int64, int64[], int64, int64, int64[], int8, int8, int8, int8, int8, int64, int64[], int64, int64, int64[], int8, int8, int8, int8, int8, int64, int64[], int64, int64, int64[], int8, int8, int8, int8, int8, int64, int64[], int64, int64, int64[], int8, int8, int8, int8, int8, int64[], int8, int8, int8, int8, int8, int8, int64[], int8, int8, int8, int8, int8, int8, int64[], int8, int8, int8, int8, int8, int8, int64[], int8, int8, int8) required broadcast ram;
  setChosenToonAttacks(uint64[], int64[], int64[], int64[]) broadcast ram;
  setBattleExperience(int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], int64, int64[], int64[], uint64[], int64[], int64[], int64[], int64[], uint64[], uint8[], int64[], uint64[]) required broadcast ram;
  denyLocalToonJoin();
  setBossBattle(uint8) required broadcast ram;
  setState(string, int64) required broadcast ram;
  faceOffDone() airecv clsend;
  toonRequestJoin(int64/10, int64/10, int64/10) airecv clsend;
  toonRequestRun() airecv clsend;
  toonDied() airecv clsend;
  adjustDone() airecv clsend;
  timeout() airecv clsend;
  movieDone() airecv clsend;
  rewardDone() airecv clsend;
  joinDone(uint64) airecv clsend;
  requestAttack(int8, int8, int64) airecv clsend;
  requestPetProxy(uint64) airecv clsend;
};

dclass DistributedBattle : DistributedBattleBase {
};

dclass DistributedBattleBldg : DistributedBattleBase {
};

dclass DistributedBattleTutorial : DistributedBattle {
};

dclass DistributedLevelBattle : DistributedBattle {
};

dclass DistributedBattleFactory : DistributedLevelBattle {
};

dclass DistributedMintBattle : DistributedLevelBattle {
};

dclass DistributedStageBattle : DistributedLevelBattle {
};

dclass DistributedBattleFinal : DistributedBattleBase {
  setBossCogId(uint64) required broadcast ram;
  setBattleNumber(uint8) required broadcast ram;
  setBattleSide(uint8) required broadcast ram;
};

dclass DistributedBoat : DistributedObject {
  setState(string, int64) required broadcast ram;
};

dclass DistributedButterfly : DistributedObject {
  setArea(int64, int64) required broadcast ram;
  setState(int8, uint8, uint8, uint64/10, int64) required broadcast ram;
  avatarEnter() airecv clsend;
};

dclass DistributedMMPiano : DistributedObject {
  requestSpeedUp() airecv clsend;
  requestChangeDirection() airecv clsend;
  setSpeed(int64/1000, uint64/100, int64) broadcast ram;
  playSpeedUp(uint64) broadcast;
  playChangeDirection(uint64) broadcast;
};

dclass DistributedDGFlower : DistributedObject {
  avatarEnter() airecv clsend;
  avatarExit() airecv clsend;
  setHeight(uint8/10) broadcast ram;
};

dclass DistributedFishingPond : DistributedObject {
  hitTarget(uint64) airecv clsend;
  setArea(uint64) required broadcast ram;
};

dclass DistributedFishingTarget : DistributedNode {
  setPondDoId(uint64) required broadcast ram;
  setState(uint8, int64/10, uint64/100, uint64/10, int64) required broadcast ram;
};

dclass DistributedFishingSpot : DistributedObject {
  setPondDoId(uint64) required broadcast ram;
  setPosHpr(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) required broadcast ram;
  requestEnter() airecv clsend;
  rejectEnter();
  requestExit() airecv clsend;
  setOccupied(uint64) broadcast ram;
  doCast(uint8/255, int64/100) airecv clsend;
  sellFish() airecv clsend;
  sellFishComplete(uint8, uint64);
  setMovie(uint8, uint8, uint64, uint64, uint64, uint8/100, int64/100) broadcast ram;
};

dclass DistributedPondBingoManager : DistributedObject {
  setPondDoId(uint64) required broadcast ram;
  updateGameState(uint64, uint8);
  setCardState(uint64, uint8, uint64, uint64);
  setState(string, int64);
  cardUpdate(uint64, uint8, uint8, uint8) airecv clsend;
  enableBingo();
  handleBingoCall(uint64) airecv clsend;
  setJackpot(uint64);
};

dclass DistributedCannon : DistributedObject {
  setEstateId(uint64) required broadcast ram;
  setTargetId(uint64) required broadcast ram;
  setPosHpr(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) required broadcast ram;
  setActive(uint8) airecv clsend;
  setActiveState(uint8) broadcast ram;
  requestEnter() airecv clsend;
  requestExit() broadcast;
  setMovie(uint8, uint64) broadcast ram;
  setCannonPosition(int64/100, uint64/100) airecv clsend;
  setCannonLit(int64/100, uint64/100) airecv clsend;
  setFired() airecv clsend;
  setLanded() airecv clsend;
  updateCannonPosition(uint64, int64/100, uint64/100) broadcast ram;
  setCannonWillFire(uint64, int64/100, int64/100, uint64/100, int64) broadcast;
  setCannonExit(uint64) broadcast;
  requestBumperMove(int64/100, int64/100, int64/100) airecv clsend;
  setCannonBumperPos(int64/100, int64/100, int64/100) required broadcast ram;
};

dclass DistributedTarget : DistributedObject {
  setPosition(int64/10, int64/10, int64/10) required broadcast ram;
  setState(uint8, uint64/10, uint8) broadcast;
  setReward(uint64) broadcast;
  setResult(uint64) airecv clsend;
  setBonus(int64/10) airecv clsend;
  setCurPinballScore(uint64, int64, int64) clsend airecv;
  setPinballHiScorer(string) broadcast ram;
  setPinballHiScore(int64) broadcast ram;
};

dclass DistributedMinigame : DistributedObject {
  setParticipants(uint64[]) broadcast ram required;
  setTrolleyZone(uint64) broadcast ram required;
  setStartingVotes(uint64[]) broadcast ram required;
  setMetagameRound(int8) broadcast ram required;
  setDifficultyOverrides(int64, int64) broadcast ram required;
  setAvatarJoined() airecv clsend;
  setAvatarReady() airecv clsend;
  setAvatarExited() airecv clsend;
  requestExit() airecv clsend;
  setGameReady() broadcast;
  setGameStart(int64) broadcast;
  setGameExit() broadcast;
  setGameAbort() broadcast;
};

dclass DistributedMinigameTemplate : DistributedMinigame {
};

dclass DistributedRaceGame : DistributedMinigame {
  setTimerStartTime(int64) broadcast;
  setAvatarChoice(uint8) airecv clsend;
  setAvatarChose(uint64) broadcast;
  setChancePositions(uint8[]) broadcast;
  setServerChoices(int8[], uint8[], int8[]) broadcast;
};

dclass DistributedCannonGame : DistributedMinigame {
  setCannonPosition(int64/100, uint64/100) airecv clsend;
  setCannonLit(int64/100, uint64/100) airecv clsend;
  updateCannonPosition(uint64, int64/100, uint64/100) broadcast;
  setCannonWillFire(uint64, int64/100, int64/100, uint64/100) broadcast;
  setToonWillLandInWater(int64/100) airecv clsend;
  announceToonWillLandInWater(uint64, int64/100) broadcast;
};

dclass DistributedPhotoGame : DistributedMinigame {
  newClientPhotoScore(uint8, char [0-256], uint64/100) airecv clsend;
  newAIPhotoScore(uint64, uint8, uint64/100) broadcast;
  filmOut() airecv clsend;
};

dclass DistributedPatternGame : DistributedMinigame {
  reportPlayerReady() airecv clsend;
  setPattern(uint8[]) broadcast;
  reportPlayerPattern(uint8[], uint64/1000) airecv clsend;
  setPlayerPatterns(uint8[], uint8[], uint8[], uint8[], uint64) broadcast;
  reportButtonPress(uint8, uint8) airecv clsend;
  remoteButtonPressed(uint64, uint8, uint8) broadcast;
};

dclass DistributedRingGame : DistributedMinigame {
  setTimeBase(int64) broadcast ram required;
  setColorIndices(int8, int8, int8, int8) broadcast ram required;
  setToonGotRing(uint8) airecv clsend;
  setRingGroupResults(uint8) broadcast;
};

dclass DistributedTagGame : DistributedMinigame {
  tag(uint64) airecv clsend;
  setIt(uint64) broadcast;
  setTreasureScore(uint64[]) broadcast;
};

dclass DistributedMazeGame : DistributedMinigame {
  claimTreasure(uint64) airecv clsend;
  setTreasureGrabbed(uint64, uint64) broadcast;
  allTreasuresTaken() broadcast;
  hitBySuit(uint64, int64) clsend broadcast;
};

dclass DistributedTugOfWarGame : DistributedMinigame {
  reportPlayerReady(uint8) airecv clsend;
  sendGoSignal(uint8[]) broadcast;
  sendStopSignal(uint64[], uint64[], uint64[]) broadcast;
  sendGameType(uint8, uint8) broadcast;
  reportEndOfContest(uint8) airecv clsend;
  sendNewAvIdList(uint64[]) airecv clsend;
  reportCurrentKeyRate(uint64, int64/100) airecv clsend;
  sendCurrentPosition(uint64[], int64/1000[]) broadcast;
  sendSuitPosition(int64/1000) broadcast;
  remoteKeyRateUpdate(uint64, uint64) broadcast;
};

dclass DistributedCatchGame : DistributedMinigame {
  claimCatch(uint64, uint64) airecv clsend;
  setObjectCaught(uint64, uint64) broadcast;
  hitBySuit(uint64, int64) clsend broadcast;
  reportDone() airecv clsend;
  setEveryoneDone() broadcast;
};

dclass DistributedDivingGame : DistributedMinigame {
  pickupTreasure(uint64) airecv clsend;
  setTreasureGrabbed(uint64, uint64) broadcast;
  handleFishCollision(uint64, uint64, uint64, char [0-256]) airecv clsend;
  performFishCollision(uint64, uint64, uint64, int64) broadcast;
  handleCrabCollision(uint64, char [0-256]) airecv clsend;
  performCrabCollision(uint64, int64) broadcast;
  setTreasureDropped(uint64, int64) broadcast;
  fishSpawn(int64, uint64, uint64, uint64) broadcast;
  removeFish(uint64) airecv clsend;
  getCrabMoving(uint64, int64, int8) airecv clsend;
  setCrabMoving(uint64, int64, int8, int8, int64, int8) broadcast;
  treasureRecovered() airecv clsend;
  incrementScore(uint64, uint64, int64) broadcast;
};

dclass DistributedTargetGame : DistributedMinigame {
  setTimeBase(int64) broadcast ram required;
  setToonGotRing(uint8) airecv clsend;
  setRingGroupResults(uint8) broadcast;
  setPlayerDone() airecv clsend;
  setScore(int64, int64) airecv clsend;
  setTargetSeed(uint64) broadcast ram;
  setRoundDone() broadcast;
  setSingleScore(uint64, uint64) broadcast;
  setGameDone() broadcast;
};

dclass EstateManager : DistributedObject {
  startAprilFools() broadcast;
  stopAprilFools() broadcast;
  getEstateZone(uint64, char [0-256]) airecv clsend;
  setEstateZone(uint64, uint64);
  setAvHouseId(uint64, uint64[]) broadcast;
  sendAvToPlayground(uint64, uint8);
  exitEstate() airecv clsend;
  removeFriend(uint64, uint64) airecv clsend;
};

struct decorItem {
  uint8 decorType;
  uint8 dataByte[];
  uint64 dataWord[];
};

struct lawnItem {
  uint8 type;
  uint8 hardPoint;
  int8 waterLevel;
  int8 growthLevel;
  uint64 optional;
};

dclass DistributedEstate : DistributedObject {
  setEstateReady() broadcast;
  setClientReady() airecv clsend;
  setEstateType(uint8 = 0) required broadcast db;
  setClosestHouse(uint8) airecv clsend;
  setTreasureIds(uint64[]) broadcast ram;
  requestServerTime() airecv clsend;
  setServerTime(uint64);
  setDawnTime(uint64) required broadcast ram;
  placeOnGround(uint64) broadcast ram;
  setDecorData(lawnItem []) required airecv db;
  setLastEpochTimeStamp(uint64 = 0) required airecv db;
  setRentalTimeStamp(uint64 = 0) required airecv db;
  setRentalType(uint8 = 0) required airecv db;
  setSlot0ToonId(uint64) required airecv db;
  setSlot0Items(lawnItem []) required airecv db;
  setSlot1ToonId(uint64) required airecv db;
  setSlot1Items(lawnItem []) required airecv db;
  setSlot2ToonId(uint64) required airecv db;
  setSlot2Items(lawnItem []) required airecv db;
  setSlot3ToonId(uint64) required airecv db;
  setSlot3Items(lawnItem []) required airecv db;
  setSlot4ToonId(uint64) required airecv db;
  setSlot4Items(lawnItem []) required airecv db;
  setSlot5ToonId(uint64) required airecv db;
  setSlot5Items(lawnItem []) required airecv db;
  setIdList(uint64 []) broadcast ram;
  completeFlowerSale(uint8) airecv clsend;
  awardedTrophy(uint64) broadcast;
  setClouds(uint8) required broadcast ram;
  cannonsOver() broadcast;
  gameTableOver() broadcast;
};

dclass DistributedHouse : DistributedObject {
  setHousePos(uint8) required broadcast;
  setHouseType(uint8 = 0) required broadcast db;
  setGardenPos(uint8 = 0) required broadcast db;
  setAvatarId(uint64 = 0) required broadcast db;
  setName(string = "") required broadcast db;
  setColor(uint8 = 0) required broadcast db;
  setAtticItems(blob = "") required db;
  setInteriorItems(blob = "") required db;
  setAtticWallpaper(blob = "") required db;
  setInteriorWallpaper(blob = "") required db;
  setAtticWindows(blob = "") required db;
  setInteriorWindows(blob = "") required db;
  setDeletedItems(blob = "") required db;
  setCannonEnabled(uint8) required;
  setHouseReady() broadcast ram;
};

dclass DistributedHouseInterior : DistributedObject {
  setHouseId(uint64) required broadcast ram;
  setHouseIndex(uint8) required broadcast ram;
  setWallpaper(blob) required broadcast ram;
  setWindows(blob) required broadcast ram;
};

dclass DistributedGarden : DistributedObject {
  sendNewProp(uint8, int64/10, int64/10, int64/10) broadcast;
};

dclass DistributedParty : DistributedObject {
  setPartyClockInfo(uint8, uint8, uint8) required broadcast;
  setInviteeIds(uint64[]) required broadcast;
  setPartyState(bool) required broadcast;
  setPartyInfoTuple(party) required broadcast;
  setAvIdsAtParty(uint64 []) required broadcast;
  setPartyStartedTime(string) required broadcast;
  setHostName(string) required broadcast;
  avIdEnteredParty(uint64) clsend airecv;
};

dclass DistributedPartyActivity : DistributedObject {
  setX(int64/10) broadcast required;
  setY(int64/10) broadcast required;
  setH(uint64%360/100) broadcast required;
  setPartyDoId(uint64) broadcast required;
  toonJoinRequest() airecv clsend;
  toonExitRequest() airecv clsend;
  toonExitDemand() airecv clsend;
  toonReady() airecv clsend;
  joinRequestDenied(uint8);
  exitRequestDenied(uint8);
  setToonsPlaying(uint64 []) broadcast ram;
  setState(string, int64) broadcast ram;
  showJellybeanReward(uint64, uint8, string);
};

dclass DistributedPartyTeamActivity : DistributedPartyActivity {
  toonJoinRequest(uint8(0-1)) airecv clsend;
  toonExitRequest(uint8(0-1)) airecv clsend;
  toonSwitchTeamRequest() airecv clsend;
  setPlayersPerTeam(uint8, uint8) broadcast required;
  setDuration(uint8) broadcast required;
  setCanSwitchTeams(bool) broadcast required;
  setState(string, int64, uint64) broadcast ram;
  setToonsPlaying(uint64 [0-8], uint64 [0-8]) required broadcast ram;
  setAdvantage(uint64/100);
  switchTeamRequestDenied(uint8);
};

struct CatchGeneration {
  uint64 generation;
  uint64 timestamp;
  int8 numPlayers;
};

dclass DistributedPartyCatchActivity : DistributedPartyActivity {
  setStartTimestamp(uint64) required broadcast ram;
  setGenerations(CatchGeneration []) required broadcast ram;
  requestActivityStart() airecv clsend;
  startRequestResponse(uint8);
  claimCatch(uint64, uint64, uint64) airecv clsend;
  setObjectCaught(uint64, uint64, uint64) broadcast;
};

dclass DistributedPartyWinterCatchActivity : DistributedPartyCatchActivity {
};

dclass DistributedPartyCogActivity : DistributedPartyTeamActivity {
  pieThrow(uint64, int64, int64/100, int64/100, int64/100, int64/100, uint8) clsend broadcast;
  pieHitsToon(uint64, int64, int64/100, int64/100, int64/100) clsend broadcast;
  pieHitsCog(uint64, int64, int8(0-2), int64/100, int64/100, int64/100, int64, bool) clsend broadcast airecv;
  setCogDistances(int8/100 [3]) broadcast ram;
  setHighScore(string, uint64) broadcast ram;
};

dclass DistributedPartyWinterCogActivity : DistributedPartyCogActivity {
};

dclass DistributedPartyDanceActivityBase : DistributedPartyActivity {
  updateDancingToon(uint8, char [0-256]) clsend airecv;
  setToonsPlaying(uint64 [], uint64%360/100 []) broadcast ram;
  setDancingToonState(uint64, uint8, string) broadcast;
};

dclass DistributedPartyDanceActivity : DistributedPartyDanceActivityBase {
};

dclass DistributedPartyDance20Activity : DistributedPartyDanceActivityBase {
};

dclass DistributedPartyValentineDanceActivity : DistributedPartyDanceActivityBase {
};

dclass DistributedPartyValentineDance20Activity : DistributedPartyDanceActivityBase {
};

dclass DistributedPartyJukeboxActivityBase : DistributedPartyActivity {
  setNextSong(jukeboxSongInfo) clsend airecv;
  setSongPlaying(jukeboxSongInfo, uint64) broadcast ram;
  queuedSongsRequest() clsend airecv;
  queuedSongsResponse(jukeboxSongInfo [], int64);
  setSongInQueue(jukeboxSongInfo);
  moveHostSongToTopRequest() clsend airecv;
  moveHostSongToTop();
};

dclass DistributedPartyJukeboxActivity : DistributedPartyJukeboxActivityBase {
};

dclass DistributedPartyJukebox40Activity : DistributedPartyJukeboxActivityBase {
};

dclass DistributedPartyValentineJukeboxActivity : DistributedPartyJukeboxActivityBase {
};

dclass DistributedPartyValentineJukebox40Activity : DistributedPartyJukeboxActivityBase {
};

dclass DistributedPartyCannonActivity : DistributedPartyActivity {
  setMovie(uint8, uint64) broadcast;
  setLanded(uint64) airecv broadcast clsend;
  setCannonWillFire(uint64, int64/100, uint64/100) broadcast;
  cloudsColorRequest() clsend airecv;
  cloudsColorResponse(partyCloudColor []);
  requestCloudHit(uint64, uint8/100, uint8/100, uint8/100) clsend airecv;
  setCloudHit(uint64, uint8/100, uint8/100, uint8/100) broadcast;
  setToonTrajectoryAi(int64, int64/100, int64/100, int64/100, int64/100, int64/100, int64/100, int64/100, int64/100, int64/100) airecv clsend;
  setToonTrajectory(uint64, int64, int64/100, int64/100, int64/100, int64/100, int64/100, int64/100, int64/100, int64/100, int64/100) broadcast;
  updateToonTrajectoryStartVelAi(int64/100, int64/100, int64/100) airecv clsend;
  updateToonTrajectoryStartVel(uint64, int64/100, int64/100, int64/100) broadcast;
};

dclass DistributedPartyCannon : DistributedObject {
  setActivityDoId(uint64) required broadcast ram;
  setPosHpr(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) required broadcast ram;
  requestEnter() airecv clsend;
  requestExit() broadcast;
  setMovie(uint8, uint64) broadcast ram;
  setCannonPosition(int64/100, uint64/100) airecv clsend;
  setCannonLit(int64/100, uint64/100) airecv clsend;
  setFired() airecv clsend;
  setLanded(uint64) airecv clsend;
  updateCannonPosition(uint64, int64/100, uint64/100) broadcast ram;
  setCannonExit(uint64) broadcast;
  setTimeout() clsend airecv;
};

dclass DistributedPartyFireworksActivity : DistributedPartyActivity {
  setEventId(uint8) required broadcast;
  setShowStyle(uint8) required broadcast;
};

dclass DistributedPartyTrampolineActivity : DistributedPartyActivity {
  awardBeans(uint8, uint64) clsend airecv;
  setBestHeightInfo(string, uint64) broadcast ram;
  reportHeightInformation(uint64) airecv clsend;
  leaveTrampoline() broadcast;
  requestAnim(char [0-256]) clsend airecv;
  requestAnimEcho(string) broadcast;
  removeBeans(int8 []) clsend airecv;
  removeBeansEcho(int8 []) broadcast;
};

dclass DistributedPartyValentineTrampolineActivity : DistributedPartyTrampolineActivity {
};

dclass DistributedPartyVictoryTrampolineActivity : DistributedPartyTrampolineActivity {
};

dclass DistributedPartyWinterTrampolineActivity : DistributedPartyTrampolineActivity {
};

dclass DistributedPartyTugOfWarActivity : DistributedPartyTeamActivity {
  reportKeyRateForce(uint64, int64/100) airecv clsend;
  reportFallIn(uint8) airecv clsend;
  setToonsPlaying(uint64 [0-4], uint64 [0-4]) required broadcast ram;
  updateToonKeyRate(uint64, uint64) broadcast;
  updateToonPositions(int64/1000) broadcast;
};

dclass DeleteManager : DistributedObject {
  setInventory(blob) airecv clsend;
};

dclass ToontownMagicWordManager : MagicWordManager {
  requestTeleport(string, string, uint64, uint64, uint64);
};

struct weeklyCalendarHoliday {
  uint8 holidayId;
  uint8 dayOfTheWeek;
};

struct yearlyCalendarHoliday {
  uint8 holidayId;
  uint8[] firstStartTime;
  uint8[] lastEndTime;
};

struct oncelyCalendarHoliday {
  uint8 holidayId;
  uint64[] firstStartTime;
  uint64[] lastEndTime;
};

struct relativelyCalendarHoliday {
  uint8 holidayId;
  uint64[] firstStartTime;
  uint64[] lastEndTime;
};

struct startAndEndTime {
  uint64[] startTime;
  uint64[] endTime;
};

struct multipleStartHoliday {
  uint8 holidayId;
  startAndEndTime times[];
};

dclass NewsManager : DistributedObject {
  setPopulation(uint64) broadcast ram;
  setBingoWin(uint64) broadcast ram;
  setBingoStart() broadcast;
  setBingoEnd() broadcast;
  setCircuitRaceStart() broadcast;
  setCircuitRaceEnd() broadcast;
  setTrolleyHolidayStart() broadcast;
  setTrolleyHolidayEnd() broadcast;
  setTrolleyWeekendStart() broadcast;
  setTrolleyWeekendEnd() broadcast;
  setRoamingTrialerWeekendStart() broadcast;
  setRoamingTrialerWeekendEnd() broadcast;
  setInvasionStatus(uint8, string, uint64, uint8) broadcast;
  setHolidayIdList(uint64[]) broadcast ram;
  holidayNotify() broadcast;
  setWeeklyCalendarHolidays(weeklyCalendarHoliday []) required broadcast ram;
  setYearlyCalendarHolidays(yearlyCalendarHoliday []) required broadcast ram;
  setOncelyCalendarHolidays(oncelyCalendarHoliday []) required broadcast ram;
  setRelativelyCalendarHolidays(relativelyCalendarHoliday []) required broadcast ram;
  setMultipleStartHolidays(multipleStartHoliday []) required broadcast ram;
  sendSystemMessage(string, uint8) broadcast ram;
};

dclass PurchaseManager : DistributedObject {
  setPlayerIds(uint64, uint64, uint64, uint64) required broadcast ram;
  setNewbieIds(uint64[]) required broadcast ram;
  setMinigamePoints(uint8, uint8, uint8, uint8) required broadcast ram;
  setPlayerMoney(uint8, uint8, uint8, uint8) required broadcast ram;
  setPlayerStates(uint8, uint8, uint8, uint8) required broadcast ram;
  setCountdown(int64) required broadcast ram;
  setMetagameRound(int8) required broadcast ram;
  setVotesArray(int64[]) required broadcast ram;
  requestExit() airecv clsend;
  requestPlayAgain() airecv clsend;
  setInventory(blob, int64, uint8) airecv clsend;
  setPurchaseExit() broadcast;
};

dclass NewbiePurchaseManager : PurchaseManager {
  setOwnedNewbieId(uint64) required broadcast ram;
};

dclass SafeZoneManager : DistributedObject {
  enterSafeZone() airecv clsend;
  exitSafeZone() airecv clsend;
};

dclass TutorialManager : DistributedObject {
  requestTutorial() airecv clsend;
  rejectTutorial() airecv clsend;
  requestSkipTutorial() airecv clsend;
  skipTutorialResponse(uint8);
  enterTutorial(uint64, uint64, uint64, uint64);
  allDone() airecv clsend;
  toonArrived() airecv clsend;
};

dclass CatalogManager : DistributedObject {
  startCatalog() airecv clsend;
};

dclass DistributedMyTest : DistributedObject {
  setMyTest(uint64) broadcast;
};

dclass DistributedTreasure : DistributedObject {
  setPosition(int64/10, int64/10, int64/10) required broadcast ram;
  requestGrab() airecv clsend;
  setGrab(uint64) broadcast ram;
  setReject() broadcast;
};

dclass DistributedDDTreasure : DistributedTreasure {
};

dclass DistributedDGTreasure : DistributedTreasure {
};

dclass DistributedDLTreasure : DistributedTreasure {
};

dclass DistributedTTTreasure : DistributedTreasure {
};

dclass DistributedBRTreasure : DistributedTreasure {
};

dclass DistributedMMTreasure : DistributedTreasure {
};

dclass DistributedOZTreasure : DistributedTreasure {
};

dclass DistributedETreasure : DistributedTreasure {
};

dclass DistributedEFlyingTreasure : DistributedTreasure {
};

dclass DistributedTagTreasure : DistributedTreasure {
};

dclass DistributedCashbotBossTreasure : DistributedTreasure {
  setGoonId(uint64) required broadcast ram;
  setFinalPosition(int64/10, int64/10, int64/10) required broadcast ram;
  setStyle(uint64) required broadcast ram;
};

dclass DistributedLargeBlobSender : DistributedObject {
  setMode(uint8) required broadcast ram;
  setTargetAvId(uint64) required broadcast ram;
  setChunk(blob);
  setFilename(string);
  setAck() airecv clsend;
};

dclass DistributedLevel : DistributedObject {
  setLevelZoneId(uint64) required broadcast ram;
  setPlayerIds(uint64[]) required broadcast ram;
  setEntranceId(uint8) required broadcast ram;
  setZoneIds(uint64[]) broadcast ram;
  setStartTimestamp(int64) broadcast ram;
  setOuch(uint8) airecv clsend;
  requestCurrentLevelSpec(string, string) airecv clsend;
  setSpecDeny(blob);
  setSpecSenderDoId(uint64);
  setAttribChange(uint64, blob, blob, blob) broadcast;
};

dclass DistributedEntity : DistributedObject {
  setLevelDoId(uint64) required broadcast ram;
  setEntId(uint64) required broadcast ram;
};

dclass DistributedInteractiveEntity : DistributedEntity {
  setAvatarInteract(uint64) required broadcast ram;
  requestInteract() airecv clsend;
  rejectInteract();
  requestExit() airecv clsend;
  avatarExit(uint64) broadcast;
  setState(string, int64) required broadcast ram;
};

dclass DistributedTrophyMgr : DistributedObject {
  requestTrophyScore() airecv clsend;
};

dclass DistributedBuilding : DistributedObject {
  setBlock(uint64, uint64) required broadcast ram;
  setSuitData(int8, int8, int8) required broadcast ram;
  setVictorList(uint64[]) broadcast ram;
  setState(string, int64) broadcast ram;
  setVictorReady() airecv clsend;
};

dclass DistributedAnimBuilding : DistributedBuilding {
};

struct SavedBy {
    uint64 avId;
    string name;
    blob dna;
    bool isGM; // Unused in-game, maybe depecerate this later?
};

dclass DistributedToonInterior : DistributedObject {
  setZoneIdAndBlock(uint64, uint64) required broadcast ram;
  setToonData(SavedBy []) required broadcast ram;
  setState(string, int64) required broadcast ram;
};

dclass DistributedToonHallInterior : DistributedToonInterior {
};

dclass DistributedSuitInterior : DistributedObject {
  setZoneId(uint64) required broadcast ram;
  setExtZoneId(uint64) required broadcast ram;
  setDistBldgDoId(uint64) required broadcast ram;
  setNumFloors(int8) required broadcast ram;
  setToons(uint64[], uint64) broadcast ram;
  setSuits(uint64[], uint64[], uint64[]) broadcast ram;
  setState(string, int64) required broadcast ram;
  setAvatarJoined() airecv clsend;
  elevatorDone() airecv clsend;
  reserveJoinDone() airecv clsend;
};

dclass DistributedCogdoBarrel : DistributedObject {
  requestGrab() airecv clsend;
  setIndex(uint64) required broadcast ram;
  setState(uint64) required broadcast ram;
  setGrab(uint64) broadcast ram;
  setReject() broadcast;
};

dclass DistributedCogdoInterior : DistributedObject {
  setZoneId(uint64) required broadcast ram;
  setExtZoneId(uint64) required broadcast ram;
  setDistBldgDoId(uint64) required broadcast ram;
  setNumFloors(int8) required broadcast ram;
  setShopOwnerNpcId(uint64) required broadcast ram;
  setSOSNpcId(uint64) broadcast ram;
  setFOType(int8) broadcast ram;
  setToons(uint64[], uint64) broadcast ram;
  setSuits(uint64[], uint64[], uint64[]) broadcast ram;
  setState(string, int64) required broadcast ram;
  setAvatarJoined() airecv clsend;
  elevatorDone() airecv clsend;
  reserveJoinDone() airecv clsend;
  toonLeftBarrelRoom() airecv clsend;
  toonBarrelRoomIntroDone() airecv clsend;
  setBarrelRoomReward(uint64 [], uint8 []) broadcast;
  toonBarrelRoomRewardDone() airecv clsend;
};

dclass DistributedCogdoBattleBldg : DistributedBattleBldg {
};

dclass DistCogdoGame : DistributedObject {
  setInteriorId(uint64) required broadcast ram;
  setExteriorZone(uint64) broadcast ram required;
  setDifficultyOverrides(int64, int64) broadcast ram required;
  setVisible() broadcast;
  setIntroStart() broadcast;
  setToonSad(uint64) broadcast;
  setToonDisconnect(uint64) broadcast;
  setAvatarReady() airecv clsend;
  setGameStart(int64) broadcast;
  setGameFinish(int64) broadcast;
};

dclass DistCogdoLevelGame : DistCogdoGame, DistributedLevel {
};

dclass DistCogdoMazeGame : DistCogdoGame {
  requestAction(uint8, uint64) airecv clsend;
  doAction(uint8, uint64, int64) broadcast;
  setNumSuits(uint8 [3]) required broadcast;
  requestUseGag(int64/10, int64/10, int64/10, int64) clsend airecv;
  toonUsedGag(uint64, int64/10, int64/10, int64/10, int64) broadcast;
  requestSuitHitByGag(uint8, uint8) clsend airecv;
  suitHitByGag(uint64, uint8, uint8) broadcast;
  requestHitBySuit(uint8, uint8, int64) clsend airecv;
  toonHitBySuit(uint64, uint8, uint8, int64) broadcast;
  requestHitByDrop() clsend airecv;
  toonHitByDrop(uint64) broadcast;
  requestPickUp(uint8) clsend airecv;
  pickUp(uint64, uint8, int64) broadcast;
  requestGag(uint8) clsend airecv;
  hasGag(uint64, int64) broadcast;
};

dclass DistCogdoFlyingGame : DistCogdoGame {
  requestAction(uint8, uint8) airecv clsend;
  requestPickUp(uint64, uint8) airecv clsend;
  pickUp(uint64, uint64, int64) broadcast;
  debuffPowerup(uint64, uint64, int64) broadcast;
  doAction(uint8, uint64) broadcast;
  eagleExitCooldown(uint64, int64) broadcast;
  toonSetAsEagleTarget(uint64, uint8, int64) broadcast;
  toonClearAsEagleTarget(uint64, uint8, int64) broadcast;
  toonDied(uint64, int64) broadcast;
  toonSpawn(uint64, int64) broadcast;
  toonSetBlades(uint64, int64) broadcast;
  toonBladeLost(uint64) broadcast;
};

dclass DistCogdoBoardroomGame : DistCogdoLevelGame {
};

dclass DistCogdoCraneGame : DistCogdoLevelGame {
};

dclass DistCogdoCrane : DistributedObject {
  setCraneGameId(uint64) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setState(char, uint64) broadcast ram;
  clearSmoothing(int8) broadcast clsend;
  setCablePos(uint8, int64/100, uint64%360/100, LinkPosition [3], int64) broadcast clsend;
};

dclass DistCogdoCraneObject : DistributedObject {
  setCraneGameId(uint64) required broadcast ram;
  setObjectState(char, uint64, uint64) broadcast ram;
  requestGrab() airecv clsend;
  rejectGrab();
  requestDrop() airecv clsend;
  hitFloor() clsend;
  requestFree(int64/10, int64/10, int64/10, uint64%360/100) airecv clsend;
  hitBoss(uint64/255) airecv clsend;
  setX(int64/10) broadcast ram clsend airecv;
  setY(int64/10) broadcast ram clsend airecv;
  setZ(int64/10) broadcast ram clsend airecv;
  setH(int64%360/10) broadcast ram clsend airecv;
  setP(int64%360/10) broadcast ram clsend airecv;
  setR(int64%360/10) broadcast ram clsend airecv;
  setPos : setX, setY, setZ;
  setHpr : setH, setP, setR;
  setPosHpr : setX, setY, setZ, setH, setP, setR;
  setXY : setX, setY;
  setXZ : setX, setZ;
  setXYH : setX, setY, setH;
  setXYZH : setX, setY, setZ, setH;
  setComponentL(uint64) broadcast ram clsend airecv;
  setComponentX(int64/10) broadcast ram clsend airecv;
  setComponentY(int64/10) broadcast ram clsend airecv;
  setComponentZ(int64/10) broadcast ram clsend airecv;
  setComponentH(int64%360/10) broadcast ram clsend airecv;
  setComponentP(int64%360/10) broadcast ram clsend airecv;
  setComponentR(int64%360/10) broadcast ram clsend airecv;
  setComponentT(int64) broadcast ram clsend airecv;
  setSmStop : setComponentT;
  setSmH : setComponentH, setComponentT;
  setSmZ : setComponentZ, setComponentT;
  setSmXY : setComponentX, setComponentY, setComponentT;
  setSmXZ : setComponentX, setComponentZ, setComponentT;
  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;
  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;
  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;
  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;
  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  clearSmoothing(int8) broadcast clsend;
};

dclass DistCogdoCraneMoneyBag : DistCogdoCraneObject {
  setIndex(uint8) required broadcast ram;
  requestInitial() airecv clsend;
};

dclass DistCogdoCraneCog : DistributedObject {
  setGameId(uint64) required broadcast ram;
  setDNAString(blob) required broadcast ram;
  setSpawnInfo(uint8, int64) required broadcast ram;
};

dclass DistributedHQInterior : DistributedObject {
  setZoneIdAndBlock(uint64, uint64) required broadcast ram;
  setLeaderBoard(uint64[], string[], uint64[]) required broadcast ram;
  setTutorial(uint8) required broadcast ram;
};

dclass DistributedGagshopInterior : DistributedObject {
  setZoneIdAndBlock(uint64, uint64) required broadcast ram;
};

dclass DistributedPetshopInterior : DistributedObject {
  setZoneIdAndBlock(uint64, uint64) required broadcast ram;
};

dclass DistributedKartShopInterior : DistributedObject {
  setZoneIdAndBlock(uint64, uint64) required broadcast ram;
};

dclass DistributedDoor : DistributedObject {
  setZoneIdAndBlock(uint64, uint64) required broadcast ram;
  setSwing(int8) required broadcast ram;
  setDoorType(uint8) required broadcast ram;
  setDoorIndex(uint8) required broadcast ram;
  setOtherZoneIdAndDoId(uint64, uint64);
  requestEnter() airecv clsend;
  requestExit() airecv clsend;
  rejectEnter(int8);
  avatarEnter(uint64) broadcast;
  avatarExit(uint64) broadcast;
  setState(string, int64) required broadcast ram;
  setExitDoorState(string, int64) required broadcast ram;
};

dclass DistributedAnimDoor : DistributedDoor {
};

dclass DistributedHouseDoor : DistributedDoor {
};

dclass DistributedCogHQDoor : DistributedDoor {
};

dclass DistributedSellbotHQDoor : DistributedCogHQDoor {
  informPlayer(uint8) broadcast ram;
};

dclass DistributedNPCToonBase : DistributedNode {
  setName(string) required broadcast ram;
  setDNAString(blob) required broadcast ram;
  setPositionIndex(uint8) required broadcast ram;
  setAnimState(string, int64/1000, int64) broadcast ram;
  setPageNumber(int64, int8, int64) broadcast ram clsend;
  avatarEnter() airecv clsend;
  freeAvatar();
};

dclass DistributedNPCToon : DistributedNPCToonBase {
  setMovie(uint8, uint64, uint64, uint64[], int64) broadcast ram;
  setMovieDone() airecv clsend;
  chooseQuest(uint64) airecv clsend;
  chooseTrack(int8) airecv clsend;
};

dclass DistributedNPCSpecialQuestGiver : DistributedNPCToonBase {
  setMovie(uint8, uint64, uint64, uint64[], int64) broadcast ram;
  setMovieDone() airecv clsend;
  chooseQuest(uint64) airecv clsend;
  chooseTrack(int8) airecv clsend;
};

dclass DistributedNPCFlippyInToonHall : DistributedNPCToon {
};

dclass DistributedNPCScientist : DistributedNPCToonBase {
  setChat(char [0-1024], uint8, uint64, uint8, uint8) ownsend broadcast;
};

dclass DistributedNPCClerk : DistributedNPCToonBase {
  setMovie(uint8, uint64, uint64, int64) broadcast ram;
  setInventory(blob, int64, uint8) airecv clsend;
};

dclass DistributedNPCTailor : DistributedNPCToonBase {
  setMovie(uint8, uint64, uint64, int64) broadcast ram;
  setDNA(blob, int8, uint8) airecv clsend;
  setCustomerDNA(uint64, blob) broadcast ram;
};

dclass DistributedNPCBlocker : DistributedNPCToonBase {
  setMovie(uint8, uint64, uint64, int64) broadcast ram;
};

dclass DistributedNPCFisherman : DistributedNPCToonBase {
  setMovie(uint8, uint64, uint64, uint64[], int64) broadcast ram;
  completeSale(uint8) airecv clsend;
};

dclass DistributedNPCPartyPerson : DistributedNPCToonBase {
  setMovie(uint8, uint64, uint64, uint64[], int64) broadcast ram;
  answer(uint8) airecv clsend;
};

dclass DistributedNPCPetclerk : DistributedNPCToonBase {
  setMovie(uint8, uint64, uint64, uint64[], int64) broadcast ram;
  setPetSeeds(uint64[]);
  petAdopted(uint8, uint64) airecv clsend;
  petReturned() airecv clsend;
  fishSold() airecv clsend;
  transactionDone() airecv clsend;
};

dclass DistributedNPCKartClerk : DistributedNPCToonBase {
  setMovie(uint8, uint64, uint64, uint64[], int64) broadcast ram;
  buyKart(uint8) airecv clsend;
  buyAccessory(uint8) airecv clsend;
  transactionDone() airecv clsend;
};

dclass DistributedKnockKnockDoor : DistributedAnimatedProp {
};

dclass DistributedElevator : DistributedObject {
  setBldgDoId(uint64) required broadcast ram;
  setState(string, int64) broadcast ram;
  fillSlot0(uint64, uint8) broadcast ram;
  fillSlot1(uint64, uint8) broadcast ram;
  fillSlot2(uint64, uint8) broadcast ram;
  fillSlot3(uint64, uint8) broadcast ram;
  fillSlot4(uint64, uint8) broadcast ram;
  fillSlot5(uint64, uint8) broadcast ram;
  fillSlot6(uint64, uint8) broadcast ram;
  fillSlot7(uint64, uint8) broadcast ram;
  emptySlot0(uint64, int8, int64, int64) broadcast ram;
  emptySlot1(uint64, int8, int64, int64) broadcast ram;
  emptySlot2(uint64, int8, int64, int64) broadcast ram;
  emptySlot3(uint64, int8, int64, int64) broadcast ram;
  emptySlot4(uint64, int8, int64, int64) broadcast ram;
  emptySlot5(uint64, int8, int64, int64) broadcast ram;
  emptySlot6(uint64, int8, int64, int64) broadcast ram;
  emptySlot7(uint64, int8, int64, int64) broadcast ram;
  requestBoard() airecv clsend;
  rejectBoard(uint64, uint8);
  requestExit() airecv clsend;
  setElevatorTripId(uint64) required broadcast ram;
  setAntiShuffle(uint8) required broadcast ram;
  setMinLaff(uint8) required broadcast ram;
};

dclass DistributedElevatorFSM : DistributedObject {
  setBldgDoId(uint64) required broadcast ram;
  setState(string, int64) broadcast ram;
  fillSlot0(uint64) broadcast ram;
  fillSlot1(uint64) broadcast ram;
  fillSlot2(uint64) broadcast ram;
  fillSlot3(uint64) broadcast ram;
  fillSlot4(uint64) broadcast ram;
  fillSlot5(uint64) broadcast ram;
  fillSlot6(uint64) broadcast ram;
  fillSlot7(uint64) broadcast ram;
  emptySlot0(uint64, int8, int64) broadcast ram;
  emptySlot1(uint64, int8, int64) broadcast ram;
  emptySlot2(uint64, int8, int64) broadcast ram;
  emptySlot3(uint64, int8, int64) broadcast ram;
  emptySlot4(uint64, int8, int64) broadcast ram;
  emptySlot5(uint64, int8, int64) broadcast ram;
  emptySlot6(uint64, int8, int64) broadcast ram;
  emptySlot7(uint64, int8, int64) broadcast ram;
  requestBoard() airecv clsend;
  rejectBoard(uint64, uint8);
  requestExit() airecv clsend;
  setElevatorTripId(uint64) required broadcast ram;
  setAntiShuffle(uint8) required broadcast ram;
  setMinLaff(uint8) required broadcast ram;
};

dclass DistributedElevatorFloor : DistributedElevatorFSM {
  setFloor(int8) broadcast ram;
  setLocked(uint64) required broadcast ram;
  setEntering(uint64) required broadcast ram;
  kickToonsOut() broadcast;
  setLatch(uint64) required broadcast ram;
};

dclass DistributedElevatorExt : DistributedElevator {
  setFloor(int8) broadcast ram;
};

dclass DistributedLawOfficeElevatorExt : DistributedElevatorExt {
  setEntranceId(uint8) required broadcast ram;
  setLawOfficeInteriorZone(uint64);
  setLawOfficeInteriorZoneForce(uint64);
};

dclass DistributedElevatorInt : DistributedElevator {
  requestBuildingExit() airecv clsend;
  forcedExit(uint64);
};

dclass DistributedFactoryElevatorExt : DistributedElevatorExt {
  setEntranceId(uint8) required broadcast ram;
  setFactoryInteriorZone(uint64);
  setFactoryInteriorZoneForce(uint64);
};

dclass DistributedMintElevatorExt : DistributedElevatorExt {
  setMintId(uint64) required broadcast ram;
  setMintInteriorZone(uint64);
  setMintInteriorZoneForce(uint64);
};

dclass DistributedCogdoElevatorExt : DistributedElevatorExt {
};

dclass DistributedLawOfficeElevatorInt : DistributedElevatorFloor {
  setLawOfficeInteriorZone(uint64);
};

dclass DistributedCogdoElevatorInt : DistributedElevatorInt {
};

dclass DistributedBossElevator : DistributedElevatorExt {
  setBossOfficeZone(uint64);
  setBossOfficeZoneForce(uint64);
};

dclass DistributedVPElevator : DistributedBossElevator {
};

dclass DistributedCFOElevator : DistributedBossElevator {
};

dclass DistributedCJElevator : DistributedBossElevator {
};

dclass DistributedBBElevator : DistributedBossElevator {
};

dclass DistributedBoardingParty : DistributedObject {
  postGroupInfo(uint64, uint64[], uint64[], uint64[]) broadcast;
  informDestinationInfo(uint8) clsend airecv;
  postDestinationInfo(uint8) broadcast;
  postInvite(uint64, uint64) broadcast;
  postInviteCanceled() broadcast;
  postKick(uint64) broadcast;
  postKickReject(uint64, uint64, uint64) broadcast;
  postSizeReject(uint64, uint64, uint64) broadcast;
  postInviteAccepted(uint64) broadcast;
  postInviteDelcined(uint64) broadcast;
  postInviteNotQualify(uint64, int8, uint64) broadcast;
  postAlreadyInGroup() broadcast;
  postGroupDissolve(uint64, uint64, uint64 [], uint8) broadcast;
  postMessageAcceptanceFailed(uint64, int8) broadcast;
  postGroupAlreadyFull() broadcast;
  postSomethingMissing() broadcast;
  postRejectBoard(uint64, int8, uint64 [], uint64 []) broadcast;
  postRejectGoto(uint64, int8, uint64 [], uint64 []) broadcast;
  postMessageInvited(uint64, uint64) broadcast;
  postMessageInvitationFailed(uint64) broadcast;
  acceptGoToFirstTime(uint64) broadcast;
  acceptGoToSecondTime(uint64) broadcast;
  rejectGoToRequest(uint64, int8, uint64 [], uint64 []) broadcast;
  requestInvite(uint64) airecv clsend;
  requestCancelInvite(uint64) airecv clsend;
  requestAcceptInvite(uint64, uint64) airecv clsend;
  requestRejectInvite(uint64, uint64) airecv clsend;
  requestKick(uint64) airecv clsend;
  requestLeave(uint64) airecv clsend;
  requestBoard(uint64) airecv clsend;
  requestGoToFirstTime(uint64) airecv clsend;
  requestGoToSecondTime(uint64) airecv clsend;
  setElevatorIdList(uint64[]) required broadcast ram;
  setGroupSize(uint8) required broadcast ram;
};

dclass DistributedTutorialInterior : DistributedObject {
  setZoneIdAndBlock(uint64, uint64) required broadcast ram;
  setTutorialNpcId(uint64) required broadcast ram;
};

dclass DistributedBankMgr : DistributedObject {
  transferMoney(int64) airecv clsend;
};

dclass DistributedMailbox : DistributedObject {
  setHouseId(uint64) required broadcast ram;
  setHousePos(uint8) required broadcast ram;
  setName(string) required broadcast ram;
  setFullIndicator(uint8) broadcast ram;
  avatarEnter() airecv clsend;
  avatarExit() airecv clsend;
  freeAvatar();
  setMovie(uint8, uint64) broadcast ram;
  acceptItemMessage(uint64, blob, uint8, int64) airecv clsend;
  acceptItemResponse(uint64, int8);
  discardItemMessage(uint64, blob, uint8, int64) airecv clsend;
  discardItemResponse(uint64, int8);
  acceptInviteMessage(uint64, uint64) airecv clsend;
  rejectInviteMessage(uint64, uint64) airecv clsend;
  markInviteReadButNotReplied(uint64) airecv clsend;
};

dclass DistributedFurnitureManager : DistributedObject {
  setOwnerId(uint64) required broadcast ram;
  setOwnerName(string) required broadcast ram;
  setInteriorId(uint64) required broadcast ram;
  setAtticItems(blob) required broadcast ram;
  setAtticWallpaper(blob) required broadcast ram;
  setAtticWindows(blob) required broadcast ram;
  setDeletedItems(blob) required broadcast ram;
  suggestDirector(uint64) airecv clsend;
  setDirector(uint64) broadcast ram;
  avatarEnter() airecv clsend;
  avatarExit() airecv clsend;
  moveItemToAtticMessage(uint64, uint64) airecv clsend;
  moveItemToAtticResponse(int8, uint64);
  moveItemFromAtticMessage(uint64, int64/10, int64/10, int64/100, int64/10, int64/10, int64/10, uint64) airecv clsend;
  moveItemFromAtticResponse(int8, uint64, uint64);
  deleteItemFromAtticMessage(blob, uint64, uint64) airecv clsend;
  deleteItemFromAtticResponse(int8, uint64);
  deleteItemFromRoomMessage(blob, uint64, uint64) airecv clsend;
  deleteItemFromRoomResponse(int8, uint64);
  moveWallpaperFromAtticMessage(uint64, uint8, uint64) airecv clsend;
  moveWallpaperFromAtticResponse(int8, uint64);
  deleteWallpaperFromAtticMessage(blob, uint64, uint64) airecv clsend;
  deleteWallpaperFromAtticResponse(int8, uint64);
  moveWindowToAtticMessage(uint8, uint64) airecv clsend;
  moveWindowToAtticResponse(int8, uint64);
  moveWindowFromAtticMessage(uint64, uint8, uint64) airecv clsend;
  moveWindowFromAtticResponse(int8, uint64);
  moveWindowMessage(uint8, uint8, uint64) airecv clsend;
  moveWindowResponse(int8, uint64);
  deleteWindowFromAtticMessage(blob, uint64, uint64) airecv clsend;
  deleteWindowFromAtticResponse(int8, uint64);
  recoverDeletedItemMessage(blob, uint64, uint64) airecv clsend;
  recoverDeletedItemResponse(int8, uint64);
};

dclass DistributedFurnitureItem : DistributedSmoothNode {
  setItem(uint64, blob) required broadcast ram;
  requestPosHpr(uint8, int64/10, int64/10, int64/100, int64/10, int64/10, int64/10, int64) airecv clsend;
  setMode(uint8, uint64) required broadcast ram;
};

dclass DistributedBank : DistributedFurnitureItem {
  avatarEnter() airecv clsend;
  freeAvatar();
  setMovie(uint8, uint64, int64) broadcast ram;
  transferMoney(int64) airecv clsend;
};

dclass DistributedCloset : DistributedFurnitureItem {
  setOwnerId(uint64) required broadcast ram;
  enterAvatar() airecv clsend;
  freeAvatar();
  removeItem(blob, uint8) airecv clsend;
  setDNA(blob, int8, uint8) airecv clsend;
  setState(uint8, uint64, uint64, string, uint8[], uint8[]) broadcast ram;
  setMovie(uint8, uint64, int64) broadcast ram;
  resetItemLists() broadcast ram;
  setCustomerDNA(uint64, blob) broadcast ram;
};

dclass DistributedTrunk : DistributedCloset {
  setState(uint8, uint64, uint64, string, uint8[], uint8[], uint8[], uint8[]) broadcast ram;
  removeItem(uint8, uint8, uint8, uint8) airecv clsend;
  setDNA(uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, int8, uint8) airecv clsend;
  setCustomerDNA(uint64, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8) broadcast ram;
};

dclass DistributedPhone : DistributedFurnitureItem {
  setInitialScale(uint8/170, uint8/170, uint8/170) required broadcast ram;
  setNewScale(uint8/170, uint8/170, uint8/170) airecv clsend;
  avatarEnter() airecv clsend;
  avatarExit() airecv clsend;
  freeAvatar();
  setLimits(uint64);
  setMovie(uint8, uint64, int64) broadcast ram;
  requestPurchaseMessage(uint64, blob, int64) airecv clsend;
  requestPurchaseResponse(uint64, int8);
  requestGiftPurchaseMessage(uint64, uint64, blob, int64) airecv clsend;
  requestGiftPurchaseResponse(uint64, int8);
};

dclass DistributedFireworkShow : DistributedObject {
  startShow(uint8, uint8, int64) broadcast ram;
  requestFirework(int64/10, int64/10, int64/100, uint8, uint8, uint8) airecv clsend;
  shootFirework(int64/10, int64/10, int64/100, uint8, uint8, uint8) broadcast;
};

dclass DistributedFireworksCannon : DistributedFireworkShow {
  avatarEnter() airecv clsend;
  avatarExit() airecv clsend;
  freeAvatar();
  setMovie(uint8, uint64, int64) broadcast ram;
  setPosition(int64/10, int64/10, int64/10) required broadcast ram;
};

dclass LobbyManager : DistributedObject {
};

dclass DistributedFactory : DistributedLevel {
  setFactoryId(uint64) required broadcast ram;
  setSuits(uint64[], uint64[]) broadcast ram;
  setForemanConfronted(uint64) broadcast ram;
  setDefeated() broadcast ram;
};

dclass DistributedLawOffice : DistributedObject {
  setLawOfficeId(uint64) required broadcast ram;
  startSignal() broadcast ram;
  readyForNextFloor() airecv clsend;
};

dclass DistributedLawOfficeFloor : DistributedLevel {
  setLawOfficeId(uint64) required broadcast ram;
  setSuits(uint64[], uint64[]) broadcast ram;
  readyForNextFloor() airecv clsend;
  setForemanConfronted(uint64) broadcast ram;
  setDefeated() broadcast ram;
};

dclass DistributedMint : DistributedObject {
  setZoneId(uint64) required broadcast ram;
  setMintId(uint64) required broadcast ram;
  setFloorNum(uint8) required broadcast ram;
  setRoomDoIds(uint64[]) broadcast ram;
};

dclass DistributedMintRoom : DistributedLevel {
  setMintId(uint64) required broadcast ram;
  setRoomId(uint64) required broadcast ram;
  setRoomNum(uint8) required broadcast ram;
  setSuits(uint64[], uint64[]) broadcast ram;
  setBossConfronted(uint64) broadcast ram;
  setDefeated() broadcast ram;
};

dclass DistributedStage : DistributedObject {
  setZoneId(uint64) required broadcast ram;
  setStageId(uint64) required broadcast ram;
  setLayoutIndex(uint64) required broadcast ram;
  setFloorNum(uint8) required broadcast ram;
  setRoomDoIds(uint64[]) broadcast ram;
  setStageZone(uint64) broadcast ram;
  elevatorAlert(uint64) broadcast ram;
};

dclass DistributedStageRoom : DistributedLevel {
  setStageId(uint64) required broadcast ram;
  setRoomId(uint64) required broadcast ram;
  setRoomNum(uint8) required broadcast ram;
  setSuits(uint64[], uint64[]) broadcast ram;
  setBossConfronted(uint64) broadcast ram;
  setDefeated() broadcast ram;
};

dclass DistributedInGameEditor : DistributedObject {
  setEditorAvId(uint64) required broadcast ram;
  setEditUsername(blob) required broadcast ram;
  setLevelDoId(uint64) required broadcast ram;
  requestCurrentLevelSpec() airecv clsend;
  setSpecSenderDoId(uint64);
  setEdit(uint64, blob, blob, blob) airecv clsend;
  setAttribChange(uint64, blob, blob, blob);
  setFinished() airecv clsend;
};

dclass DistributedLift : DistributedEntity {
  setStateTransition(uint8, uint8, uint64) required broadcast ram;
  setAvatarEnter() airecv clsend;
  setAvatarLeave() airecv clsend;
};

dclass DistributedDoorEntity : DistributedEntity {
  setLocksState(uint64) required broadcast ram;
  setDoorState(uint8, int64) required broadcast ram;
  requestOpen() airecv clsend;
};

dclass DistributedSwitch : DistributedInteractiveEntity {
};

dclass DistributedButton : DistributedSwitch {
};

dclass DistributedTrigger : DistributedSwitch {
};

dclass DistributedCrushableEntity : DistributedEntity {
  setPosition(int64/10, int64/10, int64/10) broadcast ram;
  setCrushed(uint64, uint8) broadcast ram;
};

dclass DistributedCrusherEntity : DistributedEntity {
};

dclass DistributedElevatorMarker : DistributedEntity {
};

dclass DistributedStomper : DistributedCrusherEntity {
  setMovie(uint8, int64, uint64[]) broadcast ram;
};

dclass DistributedStomperPair : DistributedEntity {
  setChildren(uint64[]) broadcast ram;
  setSquash() airecv clsend;
};

dclass DistributedBarrelBase : DistributedEntity {
  requestGrab() airecv clsend;
  setGrab(uint64) broadcast ram;
  setReject() broadcast;
};

dclass DistributedGagBarrel : DistributedBarrelBase {
};

dclass DistributedBeanBarrel : DistributedBarrelBase {
};

dclass DistributedHealBarrel : DistributedBarrelBase {
};

dclass DistributedGrid : DistributedEntity {
};

dclass ActiveCell : DistributedEntity {
  setState(uint8, uint64) broadcast ram;
};

dclass DirectionalCell : ActiveCell {
};

dclass CrusherCell : ActiveCell {
};

dclass DistributedCrate : DistributedCrushableEntity {
  requestPush(uint8) airecv clsend;
  setReject();
  setAccept() broadcast;
  setMoveTo(uint64, int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) broadcast ram;
  setDone() airecv clsend;
};

dclass DistributedSinkingPlatform : DistributedEntity {
  setOnOff(uint8, uint64) airecv clsend;
  setSinkMode(uint64, uint8, uint64) broadcast ram;
};

dclass DistributedGoon : DistributedCrushableEntity {
  requestBattle(int64/10) airecv clsend;
  requestStunned(int64/10) airecv clsend;
  requestResync() airecv clsend;
  setParameterize(int64/10, int64/10, int64/10, uint64) airecv clsend;
  setMovie(uint8, uint64, int64/10, int64) broadcast ram;
};

dclass DistributedGridGoon : DistributedGoon {
  setPathPts(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) broadcast ram;
};

dclass BattleBlocker : DistributedEntity {
  setActive(uint8) required broadcast ram;
  setSuits(uint64[]) broadcast ram;
  setBattle(uint64) broadcast ram;
  setBattleFinished() broadcast ram;
};

dclass DistributedLaserField : BattleBlocker {
  setGrid(uint8, uint8) required broadcast ram;
  setField(uint8 []) required broadcast ram;
  setSuccess(uint8) broadcast ram;
  hit(int8, int8, int8, int8) airecv clsend;
  trapFire() airecv clsend;
  setActiveLF(uint8) broadcast ram;
  hideSuit(uint64[]) broadcast ram;
  showSuit(uint64[]) broadcast ram;
  setGridGame(string) broadcast ram;
};

struct golfGreenGameBoardData {
  uint8 posX;
  uint8 posZ;
  uint8 typeIndex;
};

struct golfGreenGameScoreData {
  uint64 avId;
  uint8 score;
};

dclass DistributedGolfGreenGame : BattleBlocker {
  requestJoin() airecv clsend;
  leaveGame() airecv clsend;
  acceptJoin(uint64, int64, uint64 []) broadcast ram;
  requestBoard(uint8) airecv clsend;
  startBoard(golfGreenGameBoardData [], uint8 []);
  signalDone(uint8) broadcast ram;
  boardCleared(uint64);
  scoreData(uint8, uint8, golfGreenGameScoreData []) broadcast ram;
  informGag(uint8, uint8);
  helpOthers(uint64) broadcast;
  setTimerStart(uint64, int64) broadcast ram;
};

dclass DistributedSecurityCamera : DistributedEntity {
  trapFire() airecv clsend;
  setTarget(uint8) broadcast ram;
};

dclass DistributedMover : DistributedEntity {
  startMove(int64) broadcast ram;
};

typedef uint64/10000 PetTrait;

dclass DistributedPet : DistributedSmoothNode {
  setOwnerId(uint64) required broadcast db;
  setPetName(string) required broadcast db;
  setTraitSeed(uint64) required broadcast db;
  setSafeZone(uint64) required broadcast db;
  setForgetfulness(PetTrait) required broadcast db;
  setBoredomThreshold(PetTrait) required broadcast db;
  setRestlessnessThreshold(PetTrait) required broadcast db;
  setPlayfulnessThreshold(PetTrait) required broadcast db;
  setLonelinessThreshold(PetTrait) required broadcast db;
  setSadnessThreshold(PetTrait) required broadcast db;
  setFatigueThreshold(PetTrait) required broadcast db;
  setHungerThreshold(PetTrait) required broadcast db;
  setConfusionThreshold(PetTrait) required broadcast db;
  setExcitementThreshold(PetTrait) required broadcast db;
  setAngerThreshold(PetTrait) required broadcast db;
  setSurpriseThreshold(PetTrait) required broadcast db;
  setAffectionThreshold(PetTrait) required broadcast db;
  setHead(int8(-1-1)) required broadcast db;
  setEars(int8(-1-4)) required broadcast db;
  setNose(int8(-1-3)) required broadcast db;
  setTail(int8(-1-6)) required broadcast db;
  setBodyTexture(int8(0-6)) required broadcast db;
  setColor(int8(0-25)) required broadcast db;
  setColorScale(int8(0-8)) required broadcast db;
  setEyeColor(int8(0-5)) required broadcast db;
  setGender(int8(0-1)) required broadcast db;
  setLastSeenTimestamp(uint64) required broadcast db;
  setBoredom(uint64/1000(0-1)) required broadcast db;
  setRestlessness(uint64/1000(0-1)) required broadcast db;
  setPlayfulness(uint64/1000(0-1)) required broadcast db;
  setLoneliness(uint64/1000(0-1)) required broadcast db;
  setSadness(uint64/1000(0-1)) required broadcast db;
  setAffection(uint64/1000(0-1)) required broadcast db;
  setHunger(uint64/1000(0-1)) required broadcast db;
  setConfusion(uint64/1000(0-1)) required broadcast db;
  setExcitement(uint64/1000(0-1)) required broadcast db;
  setFatigue(uint64/1000(0-1)) required broadcast db;
  setAnger(uint64/1000(0-1)) required broadcast db;
  setSurprise(uint64/1000(0-1)) required broadcast db;
  setMood : setBoredom, setRestlessness, setPlayfulness, setLoneliness, setSadness, setAffection, setHunger, setConfusion, setExcitement, setFatigue, setAnger, setSurprise;
  teleportIn(int64) broadcast ownsend;
  teleportOut(int64) broadcast ownsend;
  setTrickAptitudes(uint64/10000(0-1) []) required broadcast db;
  doTrick(uint8, int64) broadcast ram;
  avatarInteract(uint64);
  setMovie(uint8, uint64, int64) broadcast ram;
  freeAvatar();
};

dclass DistributedPetProxy : DistributedPet {
  setDominantMood(string) broadcast ram;
};

dclass DistributedBlackCatMgr : DistributedObject {
  setAvId(uint64) required broadcast ram;
  doBlackCatTransformation() airecv clsend;
};

dclass DistributedPolarPlaceEffectMgr : DistributedObject {
  addPolarPlaceEffect() airecv clsend;
};

dclass DistributedGreenToonEffectMgr : DistributedObject {
  addGreenToonEffect() airecv clsend;
};

dclass DistributedResistanceEmoteMgr : DistributedObject {
  addResistanceEmote() airecv clsend;
};

dclass DistributedScavengerHuntTarget : DistributedObject {
  attemptScavengerHunt() airecv clsend;
};

dclass DistributedTrickOrTreatTarget : DistributedScavengerHuntTarget {
};

dclass DistributedWinterCarolingTarget : DistributedScavengerHuntTarget {
};

dclass DistributedDataStoreManager : DistributedObject {
  startStore(uint8);
  stopStore(uint8);
  queryStore(uint8, string);
  receiveResults(uint8, string);
  deleteBackupStores();
};

dclass DistributedVehicle : DistributedSmoothNode {
  setOwner(uint64) required broadcast ram;
  setState(char, uint64) broadcast ram;
  setBodyType(int8) required broadcast ram;
  setBodyColor(int8) required broadcast ram;
  setAccessoryColor(int8) required broadcast ram;
  setEngineBlockType(int8) required broadcast ram;
  setSpoilerType(int8) required broadcast ram;
  setFrontWheelWellType(int8) required broadcast ram;
  setBackWheelWellType(int8) required broadcast ram;
  setRimType(int8) required broadcast ram;
  setDecalType(int8) required broadcast ram;
  requestControl() airecv clsend;
  requestParked() airecv clsend;
  setInput(int8) broadcast ram;
};

struct avatarAndKart {
  uint64 avId;
  uint64 kartId;
};

dclass DistributedRace : DistributedObject {
  setZoneId(uint64) required broadcast ram;
  setTrackId(uint64) required broadcast ram;
  setRaceType(uint64) required broadcast ram;
  setCircuitLoop(uint64[]) required broadcast ram;
  setAvatars(uint64[]) required broadcast ram;
  setStartingPlaces(uint8[]) required broadcast ram;
  setLapCount(uint8) broadcast required ram;
  waitingForJoin() broadcast ram;
  setEnteredRacers(avatarAndKart []) broadcast ram;
  prepForRace() broadcast ram;
  startTutorial() broadcast ram;
  startRace(int64) broadcast ram;
  goToSpeedway(uint64[], uint8) broadcast ram;
  genGag(uint8, uint64, uint8) broadcast ram;
  dropAnvilOn(uint64, uint64, int64) broadcast ram;
  shootPiejectile(uint64, uint64, uint8) broadcast ram;
  racerDisconnected(uint64) broadcast ram;
  setPlace(uint64, uint64/1000, uint8, uint64, uint8, uint64, uint64, uint64[], uint64[], uint64/1000) broadcast ram;
  setCircuitPlace(uint64, uint8, uint64, uint64, uint64, uint64[]) broadcast ram;
  endCircuitRace() broadcast ram;
  setRaceZone(uint64, uint64);
  hasGag(uint8, uint8, uint8) broadcast airecv clsend;
  racerLeft(uint64) clsend airecv broadcast ram;
  heresMyT(uint64, int8, uint64/65535, int64) clsend airecv broadcast;
  requestThrow(int64/1000, int64/1000, int64/1000) clsend airecv;
  requestKart() clsend airecv;
};

dclass DistributedGag : DistributedObject {
  setInitTime(int64) required broadcast ram;
  setActivateTime(uint64) required broadcast ram;
  setPos(int64/1000, int64/1000, int64/1000) required broadcast ram;
  setRace(uint64) required broadcast ram;
  setOwnerId(uint64) required broadcast ram;
  setType(uint8) required broadcast ram;
  hitSomebody(uint64, int64) broadcast clsend airecv;
};

dclass DistributedProjectile : DistributedObject {
  setInitTime(int64) required broadcast ram;
  setPos(int64/1000, int64/1000, int64/1000) required broadcast ram;
  setRace(uint64) required broadcast ram;
  setOwnerId(uint64) required broadcast ram;
  setType(uint8) required broadcast ram;
  hitSomebody(uint64, int64) broadcast clsend airecv;
};

dclass DistributedKartPad : DistributedObject {
  setArea(uint64) required broadcast ram;
};

dclass DistributedRacePad : DistributedKartPad {
  setState(string, int64) required broadcast ram;
  setRaceZone(uint64);
  setTrackInfo(uint64[]) required broadcast ram;
};

dclass DistributedViewPad : DistributedKartPad {
  setLastEntered(int64) required broadcast ram;
};

dclass DistributedStartingBlock : DistributedObject {
  setPadDoId(uint64) required broadcast ram;
  setPosHpr(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) required broadcast ram;
  setPadLocationId(uint8) required broadcast ram;
  requestEnter(uint8) airecv clsend;
  rejectEnter(uint8);
  requestExit() airecv clsend;
  setOccupied(uint64) broadcast ram;
  setMovie(uint8) broadcast ram;
  movieFinished() airecv clsend;
};

dclass DistributedViewingBlock : DistributedStartingBlock {
};

struct RaceRecord {
    uint64/100 time;
    string name;
};

dclass DistributedLeaderBoard : DistributedObject {
  setPosHpr(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) required broadcast ram;
  setDisplay(string, string, RaceRecord[10]) broadcast ram;
};

dclass DistributedDeliveryManager : DistributedObject {
  hello(string) clsend;
  rejectHello(string);
  helloResponse(string);
  getName(uint64);
  receiveRejectGetName(string);
  receiveAcceptGetName(string);
  addName(uint64, string);
  receiveRejectAddName(uint64);
  receiveAcceptAddName(uint64);
  addGift(uint64, blob, uint64, uint64, uint64);
  receiveRejectAddGift(uint64);
  receiveAcceptAddGift(uint64, uint64, uint64, uint64);
  deliverGifts(uint64, uint64);
  receiveAcceptDeliverGifts(uint64, string);
  receiveRejectDeliverGifts(uint64, string);
  receiveRequestPayForGift(blob, uint64, uint64) airecv clsend;
  receiveRequestPurchaseGift(blob, uint64, uint64, uint64) airecv;
  receiveAcceptPurchaseGift(uint64, uint64, int64);
  receiveRejectPurchaseGift(uint64, uint64, int64, uint64);
  heartbeat() airecv;
  giveBeanBonus(uint64, uint64);
  requestAck() clsend;
  returnAck();
  givePartyRefund(uint64, uint64, uint64, int8, uint64);
};

dclass DistributedLawbotBoss : DistributedBossCog {
  setState(string) broadcast ram;
  setBossDamage(uint64, uint8, int64) broadcast ram;
  touchWitnessStand() airecv clsend;
  hitBoss(uint8) airecv clsend;
  healBoss(uint8) airecv clsend;
  hitToon(uint64) airecv clsend;
  hitDefensePan() airecv clsend;
  hitProsecutionPan() airecv clsend;
  hitChair(uint8, uint8) airecv clsend;
  setLawyerIds(uint64[]) broadcast ram;
  setTaunt(int8, int8) broadcast;
  toonGotHealed(uint64) broadcast;
  enteredBonusState() broadcast;
  setBattleDifficulty(uint8) broadcast ram;
};

dclass DistributedLawbotBossSuit : DistributedSuitBase {
  setPosHpr(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) required broadcast ram;
  doAttack(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) broadcast;
  doProsecute() broadcast;
  hitByToon() airecv clsend;
  doStun() broadcast;
};

dclass DistributedLawbotBossGavel : DistributedObject {
  setBossCogId(uint64) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setState(char) broadcast ram;
};

dclass DistributedLawbotCannon : DistributedObject {
  setBossCogId(uint64) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setPosHpr(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) required broadcast ram;
  requestEnter() airecv clsend;
  setMovie(int8, uint64, uint8) broadcast;
  setCannonPosition(int64/10, int64/10) airecv clsend;
  updateCannonPosition(uint64, int64/10, int64/10) broadcast;
  setCannonLit(int64/10, int64/10) airecv clsend;
  setCannonWillFire(uint64, int64/10, int64/10, int64/10, int64) broadcast;
  setLanded() airecv clsend;
  requestLeave() airecv clsend;
};

dclass DistributedLawbotChair : DistributedObject {
  setBossCogId(uint64) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setState(char) broadcast ram;
  showCogJurorFlying() broadcast;
  setToonJurorIndex(int8) broadcast ram;
};

dclass DistributedLawnDecor : DistributedNode {
  setPlot(int8) required broadcast ram;
  setHeading(int64/10) required broadcast ram;
  setPosition(int64/10, int64/10, int64/10) required broadcast ram;
  setOwnerIndex(int8) required broadcast ram;
  plotEntered() airecv clsend;
  removeItem() airecv clsend;
  setMovie(uint8, uint64) broadcast ram;
  movieDone() airecv clsend;
  interactionDenied(uint64) broadcast ram;
};

dclass DistributedGardenPlot : DistributedLawnDecor {
  plantFlower(uint8, uint8) airecv clsend;
  plantGagTree(uint8, uint8) airecv clsend;
  plantStatuary(uint8) airecv clsend;
  plantToonStatuary(uint8, uint64) airecv clsend;
  plantNothing(uint8) airecv clsend;
};

dclass DistributedGardenBox : DistributedLawnDecor {
  setTypeIndex(uint8) required broadcast ram;
};

dclass DistributedStatuary : DistributedLawnDecor {
  setTypeIndex(uint8) required broadcast ram;
  setWaterLevel(int8) required broadcast ram;
  setGrowthLevel(int8) required broadcast ram;
};

dclass DistributedToonStatuary : DistributedStatuary {
  setOptional(uint64) required broadcast ram;
};

dclass DistributedAnimatedStatuary : DistributedStatuary {
};

dclass DistributedChangingStatuary : DistributedStatuary {
  setGrowthLevel(int8) required broadcast ram;
};

dclass DistributedPlantBase : DistributedLawnDecor {
  setTypeIndex(uint8) required broadcast ram;
  setWaterLevel(int8) required broadcast ram;
  setGrowthLevel(int8) required broadcast ram;
  waterPlant() airecv clsend;
  waterPlantDone() airecv clsend;
};

dclass DistributedFlower : DistributedPlantBase {
  setTypeIndex(uint8) required broadcast ram;
  setVariety(uint8) required broadcast ram;
};

dclass DistributedGagTree : DistributedPlantBase {
  setWilted(int8) required broadcast ram;
  requestHarvest() airecv clsend;
};

dclass DistributedTravelGame : DistributedMinigame {
  setTimerStartTime(int64) broadcast;
  setAvatarChoice(uint64, uint8) airecv clsend;
  setAvatarChose(uint64) broadcast;
  setServerChoices(int64[], uint8[], uint8, uint8) broadcast;
  setMinigames(uint8[], uint8[]) broadcast;
  setBonuses(uint8[], uint8[]) broadcast;
  setBoardIndex(uint8) required broadcast ram;
};

dclass DistributedPairingGame : DistributedMinigame {
  setDeckSeed(uint64) required broadcast ram;
  setMaxOpenCards(uint8) broadcast ram;
  openCardRequest(int64, int64) airecv clsend;
  openCardResult(int64, uint64, int64, int8, int64[]) broadcast;
  reportDone() airecv clsend;
  setEveryoneDone() broadcast;
  setSignaling(uint64) clsend broadcast;
};

struct golfData {
  int64 frame;
  int64/100000 x;
  int64/100000 y;
  int64/100000 z;
};

struct Coord3 {
  int64/100000 x;
  int64/100000 y;
  int64/100000 z;
};

struct CommonObjectData {
  uint8 id;
  uint8 type;
  int64/100000 x;
  int64/100000 y;
  int64/100000 z;
  int64/100000 q1;
  int64/100000 q2;
  int64/100000 q3;
  int64/100000 q4;
  int64/100000 aVX;
  int64/100000 aVY;
  int64/100000 aVZ;
  int64/100000 lVX;
  int64/100000 lVY;
  int64/100000 lVZ;
};

dclass DistributedPhysicsWorld : DistributedObject {
  clientCommonObject(uint8, uint8, Coord3, Coord3, int64/100, int64/100, int64/1000) broadcast ram;
  setCommonObjects(CommonObjectData []) broadcast;
  upSetCommonObjects(CommonObjectData []) airecv clsend;
};

dclass DistributedGolfHole : DistributedPhysicsWorld {
  setHoleId(int8) broadcast ram required;
  setTimingCycleLength(uint64/1000) broadcast ram required;
  setAvatarReadyHole() airecv clsend;
  setGolfCourseDoId(uint64) broadcast ram required;
  turnDone() airecv clsend;
  ballInHole() airecv clsend;
  setAvatarTempTee(uint64, uint8) clsend broadcast;
  setTempAimHeading(uint64, int64/1000) clsend broadcast;
  setAvatarFinalTee(uint64, uint8) broadcast;
  setGolferIds(uint64[]) broadcast ram required;
  golfersTurn(uint64) broadcast;
  golferChooseTee(uint64) broadcast;
  setAvatarTee(uint8) airecv clsend;
  postSwing(uint64/1000, int64, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000) airecv clsend;
  postSwingState(uint64/1000, int64, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, uint64/100, CommonObjectData []) airecv clsend;
  swing(uint64, int64, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000) broadcast;
  ballMovie2AI(uint64/1000, uint64, golfData [], golfData [], uint64, uint64, uint64, CommonObjectData []) airecv clsend;
  ballMovie2Client(uint64/1000, uint64, golfData [], golfData [], uint64, uint64, uint64, CommonObjectData []) broadcast;
  assignRecordSwing(uint64, uint64/1000, int64, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, CommonObjectData []);
  setBox(int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000) airecv clsend;
  sendBox(int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000, int64/1000) broadcast;
};

dclass DistributedGolfCourse : DistributedObject {
  setGolferIds(uint64[]) broadcast ram required;
  setCourseId(int8) broadcast ram required;
  setAvatarJoined() airecv clsend;
  setAvatarReadyCourse() airecv clsend;
  setAvatarReadyHole() airecv clsend;
  setAvatarExited() airecv clsend;
  setCurHoleIndex(int8) broadcast ram required;
  setCurHoleDoId(uint64) broadcast ram required;
  setDoneReward() airecv clsend;
  setReward(uint8[] [], int8[], uint8[] [], uint8[] [], uint8[] [], uint64, uint64/100, uint64/100, uint64/100, uint64/100) broadcast;
  setCourseReady(int8, int64[], int8) broadcast;
  setHoleStart(int64) broadcast;
  setCourseExit() broadcast;
  setCourseAbort(uint64) broadcast;
  setPlayHole() broadcast;
  avExited(uint64) broadcast;
  setScores(int64 []) broadcast;
  changeDrivePermission(uint64, int8) broadcast;
};

dclass DistributedVineGame : DistributedMinigame {
  reachedEndVine(int8) clsend airecv;
  setNewVine(uint64, int8, uint64/10000, int8) airecv clsend broadcast;
  setNewVineT(uint64, uint64/10000, int8) clsend broadcast;
  setJumpingFromVine(uint64, int8, int8, int64/100, int64/100, int64/100, int64) clsend broadcast;
  claimTreasure(uint64) airecv clsend;
  setTreasureGrabbed(uint64, uint64) broadcast;
  setScore(uint64, uint64) broadcast;
  allAtEndVine() broadcast;
  setFallingFromVine(uint64, int8, int8, int64/100, int64/100, int64/100, int64, int8) clsend broadcast;
  setFallingFromMidair(uint64, int8, int64/100, int64/100, int64/100, int64, int8) clsend broadcast;
  setVineSections(uint8[]) required broadcast ram;
};

dclass TTAvatarFriendsManager : AvatarFriendsManager {
};

dclass TTPlayerFriendsManager : PlayerFriendsManager {
};

struct FriendEntry {
  uint64 doId;
  string name;
  blob dna;
  uint64 petId;
}

dclass TTOffFriendsManager : DistributedObject {
  getFriendsListRequest() clsend;
  friendsListRequestResp(FriendEntry[]);
  friendOnline(uint64, uint8, uint8);
  getAvatarDetails(uint64) clsend;
  avatarDetailsResp(uint64, blob);
  removeFriend(uint64) clsend;
  friendOffline(uint64);
  goingOffline(uint64);
  clearList(uint64);
};

dclass TTSpeedchatRelay : SpeedchatRelay {
};

dclass DistributedGolfKart : DistributedObject {
  setState(string, int64) broadcast ram;
  fillSlot0(uint64) broadcast ram;
  fillSlot1(uint64) broadcast ram;
  fillSlot2(uint64) broadcast ram;
  fillSlot3(uint64) broadcast ram;
  emptySlot0(uint64, int64) broadcast ram;
  emptySlot1(uint64, int64) broadcast ram;
  emptySlot2(uint64, int64) broadcast ram;
  emptySlot3(uint64, int64) broadcast ram;
  requestBoard() airecv clsend;
  rejectBoard(uint64);
  requestExit() airecv clsend;
  setMinigameZone(uint64, uint64);
  setGolfZone(uint64, uint64);
  setGolfCourse(int8) required broadcast ram;
  setPosHpr(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) required broadcast ram;
  setColor(int64, int64, int64) required broadcast ram;
};

dclass DistributedTimer : DistributedObject {
  setStartTime(int64) broadcast ram required;
};

dclass DistributedPicnicBasket : DistributedObject {
  setState(string, uint64, int64) broadcast ram;
  fillSlot0(uint64) broadcast ram;
  fillSlot1(uint64) broadcast ram;
  fillSlot2(uint64) broadcast ram;
  fillSlot3(uint64) broadcast ram;
  emptySlot0(uint64, int64) broadcast ram;
  emptySlot1(uint64, int64) broadcast ram;
  emptySlot2(uint64, int64) broadcast ram;
  emptySlot3(uint64, int64) broadcast ram;
  requestBoard(int64) airecv clsend;
  rejectBoard(uint64);
  requestExit() airecv clsend;
  doneExit() airecv clsend;
  setMinigameZone(uint64, uint64);
  setPicnicDone();
  setPosHpr(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) required broadcast ram;
  setTableNumber(int64) required broadcast ram;
};

dclass DistributedBossbotBoss : DistributedBossCog {
  setState(string) broadcast ram;
  setBattleDifficulty(uint8) broadcast ram;
  requestGetFood(int8, int8, uint64) airecv clsend;
  toonGotFood(uint64, int8, int8, uint64) broadcast;
  requestServeFood(int8, int8) airecv clsend;
  toonServeFood(uint64, int8, int8) broadcast;
  hitBoss(uint8) airecv clsend;
  hitToon(uint64) airecv clsend;
  ballHitBoss(uint8) airecv clsend;
  setBossDamage(uint64, uint8, int64) broadcast ram;
  setSpeedDamage(uint64, uint8, int64) broadcast ram;
  reachedTable(uint8) airecv clsend;
  hitTable(uint8) airecv clsend;
  awayFromTable(uint8) airecv clsend;
  toonGotHealed(uint64) broadcast;
  requestGetToonup(int8, int8, uint64) airecv clsend;
  toonGotToonup(uint64, int8, int8, uint64) broadcast;
};

dclass DistributedCogKart : DistributedElevatorExt {
  setCountryClubId(uint64) required broadcast ram;
  setPosHpr(int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) required broadcast ram;
  setCountryClubInteriorZone(uint64);
  setCountryClubInteriorZoneForce(uint64);
};

dclass DistributedCountryClub : DistributedObject {
  setZoneId(uint64) required broadcast ram;
  setBlockedRooms(uint8[]) required broadcast ram;
  setCountryClubId(uint64) required broadcast ram;
  setLayoutIndex(uint64) required broadcast ram;
  setFloorNum(uint8) required broadcast ram;
  setRoomDoIds(uint64[]) broadcast ram;
  setCountryClubZone(uint64) broadcast ram;
  elevatorAlert(uint64) broadcast ram;
};

dclass DistributedCountryClubRoom : DistributedLevel {
  setCountryClubId(uint64) required broadcast ram;
  setRoomId(uint64) required broadcast ram;
  setRoomNum(uint8) required broadcast ram;
  setSuits(uint64[], uint64[]) broadcast ram;
  setBossConfronted(uint64) broadcast ram;
  setDefeated() broadcast ram;
  forceOuch(uint8) broadcast;
};

dclass DistributedMoleField : DistributedEntity {
  setGameStart(int64, uint8, uint64) broadcast;
  setClientTriggered() airecv clsend;
  whackedMole(int8, int64) airecv clsend;
  whackedBomb(int8, int64, int64) airecv clsend;
  updateMole(int8, int8) broadcast;
  reportToonHitByBomb(uint64, int8, int64) broadcast;
  setScore(int64) required broadcast ram;
  damageMe() airecv clsend;
  setPityWin() broadcast;
};

dclass DistributedCountryClubBattle : DistributedLevelBattle {
};

dclass DistributedClubElevator : DistributedElevatorFSM {
  setFloor(int8) broadcast ram;
  setLocked(uint64) required broadcast ram;
  setEntering(uint64) required broadcast ram;
  kickToonsOut() broadcast;
  setLatch(uint64) required broadcast ram;
};

dclass DistributedMaze : DistributedEntity {
  setRoomDoId(uint64) required broadcast ram;
  setGameStart(int64) broadcast;
  setClientTriggered() airecv clsend;
  setFinishedMaze() airecv clsend;
  setGameOver() broadcast;
  toonFinished(uint64, uint8, uint8) broadcast;
  damageMe() airecv clsend;
};

dclass DistributedBattleWaiters : DistributedBattleFinal {
};

dclass DistributedFoodBelt : DistributedObject {
  setBossCogId(uint64) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setState(char) broadcast ram;
};

dclass DistributedBanquetTable : DistributedObject {
  setIndex(uint8) required broadcast ram;
  setNumDiners(uint8) required broadcast ram;
  setBossCogId(uint64) required broadcast ram;
  setDinerInfo(uint8[], uint8[], uint8[]) required broadcast ram;
  setState(char, uint64, int8) broadcast ram;
  setDinerStatus(uint8, uint8) broadcast;
  requestControl() airecv clsend;
  requestFree(int8) airecv clsend;
  setPitcherPos(uint8, uint64%360/100, int64) broadcast clsend;
  clearSmoothing(int8) broadcast clsend;
  firingWater(int64/100, int64/100, int64/100, int64/100, int64/100, int64/100) broadcast clsend;
  waterHitBoss(uint8) broadcast clsend;
};

dclass DistributedBattleDiners : DistributedBattleFinal {
};

dclass DistributedGolfSpot : DistributedObject {
  setIndex(uint8) required broadcast ram;
  setBossCogId(uint64) required broadcast ram;
  setState(char, uint64, int8) broadcast ram;
  setGoingToReward() broadcast ram;
  requestControl() airecv clsend;
  requestFree(int8) airecv clsend;
  setGolfSpotPos(uint8, uint64%360/100, int64) broadcast clsend;
  clearSmoothing(int8) broadcast clsend;
  setSwingInfo(uint8, int64/10, uint8) broadcast clsend;
};

struct TireInput {
  int64/100 force;
  int64/100 heading;
};

dclass DistributedBattleCogs : DistributedBattleFinal {
};


dclass DistributedIceGame : DistributedMinigame {
  setForceArrowInfo(uint64, int64/100, int64/100) broadcast clsend;
  setAvatarChoice(int64/100, int64/100) airecv clsend;
  endingPositions(Coord3 []) airecv clsend;
  reportScoringMovieDone() airecv clsend;
  claimTreasure(uint8) airecv clsend;
  claimPenalty(uint8) airecv clsend;
  setTireInputs(TireInput []) broadcast;
  setTimerStartTime(int64) broadcast;
  setFinalPositions(Coord3 []) broadcast;
  setMatchAndRound(int8, int8) broadcast;
  setScores(int8, int8, int64[]) broadcast;
  setNewState(string) broadcast;
  setTreasureGrabbed(uint64, uint64) broadcast;
  setPenaltyGrabbed(uint64, uint64) broadcast;
};

dclass DistributedCogThiefGame : DistributedMinigame {
  throwingPie(uint64, int64, int64/100, int64/100, int64/100, int64/100) clsend broadcast;
  hitBySuit(uint64, int64, int8, int64/100, int64/100, int64/100) clsend broadcast airecv;
  pieHitSuit(uint64, int64, int8, int64/100, int64/100, int64/100) clsend broadcast airecv;
  cogHitBarrel(int64, int8, int8, int64/100, int64/100, int64/100) clsend airecv;
  cogAtReturnPos(int64, int8, int8) clsend airecv;
  updateSuitGoal(int64, int64, int8, int8, int64, int64/100, int64/100, int64/100) broadcast;
  makeCogCarryBarrel(int64, int64, int8, int8, int64/100, int64/100, int64/100) broadcast;
  makeCogDropBarrel(int64, int64, int8, int8, int64/100, int64/100, int64/100) broadcast;
  markBarrelStolen(int64, int64, int8) broadcast;
};

struct twoDTreasureInfo {
  uint8 treasureIndex;
  uint8 treasureValue;
};

struct twoDSectionInfo {
  uint8 sectionIndex;
  uint8 enemyIndicesSelected[];
  twoDTreasureInfo treasureIndicesSelected[];
  uint8 spawnPointIndicesSelected[];
  uint8 stomperIndicesSelected[];
};

dclass DistributedTwoDGame : DistributedMinigame {
  showShootGun(uint64, int64) clsend broadcast;
  toonHitByEnemy(uint64, int64) clsend broadcast airecv;
  toonFellDown(uint64, int64) clsend broadcast airecv;
  toonSquished(uint64, int64) clsend broadcast airecv;
  toonVictory(uint64, int64) clsend broadcast airecv;
  claimTreasure(uint8, uint8) airecv clsend;
  claimEnemyShot(uint8, uint8) airecv clsend;
  reportDone() airecv clsend;
  setSectionsSelected(twoDSectionInfo []) required broadcast ram;
  setTreasureGrabbed(uint64, uint8, uint8) broadcast;
  setEnemyShot(uint64, uint8, uint8, uint64) broadcast;
  addVictoryScore(uint64, uint8) broadcast;
  setEveryoneDone() broadcast;
};

dclass DistributedPicnicTable : DistributedNode {
  fillSlot(uint64, uint8, int64/10, int64/10, int64/10, int64/10, int64/10, int64/10, int64, uint64) broadcast;
  emptySlot(uint64, uint8, int64) broadcast;
  requestTableState() airecv clsend;
  setTableState(uint64 [], uint8) broadcast ram;
  setGameZone(uint64, uint8) broadcast;
  setIsPlaying(uint8) broadcast ram;
  requestJoin(uint8, int64/10, int64/10, int64/10, int64/10, int64/10, int64/10) airecv clsend;
  rejectJoin() broadcast;
  requestObserve() airecv clsend;
  leaveObserve() airecv clsend;
  requestGameZone() airecv clsend;
  requestPickedGame(uint8) clsend airecv;
  requestExit() airecv clsend;
  requestZone() clsend airecv;
  announceWinner(string, uint64) broadcast;
  allowObserve() broadcast;
  allowPick() broadcast;
  setZone(uint64) broadcast;
};

dclass DistributedChineseCheckers : DistributedNode {
  requestExit() clsend airecv;
  requestBegin() clsend airecv;
  requestMove(uint8 []) clsend airecv;
  requestTimer() clsend airecv;
  requestSeatPositions() clsend airecv;
  startBeginTimer(uint64, int64) broadcast ram;
  gameStart(uint8) broadcast;
  setTableDoId(uint64) required broadcast ram;
  setGameState(uint8 [], uint8 []) required broadcast ram;
  setTimer(int64) broadcast ram required;
  setTurnTimer(int64) broadcast ram required;
  sendTurn(uint8) broadcast ram;
  requestWin() clsend airecv;
  announceWin(uint64) broadcast;
  announceSeatPositions(uint8 []) broadcast;
};

dclass DistributedCheckers : DistributedNode {
  requestExit() clsend airecv;
  requestBegin() clsend airecv;
  requestTimer() clsend airecv;
  requestMove(uint8 []) clsend airecv;
  startBeginTimer(uint64, int64) broadcast ram;
  gameStart(uint8) broadcast;
  setTableDoId(uint64) required broadcast ram;
  setGameState(uint8 [], uint8 []) required broadcast ram;
  setTimer(int64) broadcast ram required;
  setTurnTimer(int64) broadcast ram required;
  sendTurn(uint8) broadcast ram;
  requestWin() clsend airecv;
  announceWin(uint64) broadcast;
  illegalMove() broadcast;
};

dclass DistributedFindFour : DistributedNode {
  requestExit() clsend airecv;
  requestBegin() clsend airecv;
  requestMove(uint8) clsend airecv;
  requestTimer() clsend airecv;
  requestWin(uint8 []) clsend airecv;
  startBeginTimer(uint64, int64) broadcast ram;
  setTableDoId(uint64) required broadcast ram;
  setGameState(uint8 [][], uint8, uint8, uint8) required broadcast ram;
  setTimer(int64) broadcast ram required;
  setTurnTimer(int64) broadcast ram required;
  gameStart(uint8) broadcast;
  sendTurn(uint8) broadcast ram;
  announceWin(uint64) broadcast;
  announceWinLocation(uint8, uint8, uint8, uint8) broadcast;
  announceWinnerPosition(uint8, uint8, uint8, uint8) broadcast;
  illegalMove() broadcast;
  tie() broadcast;
};

dclass DistributedMailManager : DistributedObject {
  sendSimpleMail(uint64, uint64, string);
  setNumMailItems(uint64, uint64) airecv;
};

dclass DistributedPartyManager : DistributedObject {
  addParty(uint64, uint64, string, string, int8, int8, activity [], decoration [], uint64[], uint64);
  addPartyRequest(uint64, char [0-256], char [0-256], int8, int8, activity [], decoration [], uint64[]) airecv clsend;
  addPartyResponse(uint64, int8);
  addPartyResponseUdToAi(uint64, int8, uint64) airecv;
  markInviteAsReadButNotReplied(uint64, uint64);
  respondToInvite(uint64, uint64, uint64, uint64, uint8);
  respondToInviteResponse(uint64, uint64, uint64, int8, uint8) airecv;
  changePrivateRequest(uint64, int8) airecv clsend;
  changePrivateRequestAiToUd(uint64, uint64, int8);
  changePrivateResponseUdToAi(uint64, uint64, int8, int8) airecv;
  changePrivateResponse(uint64, int8, int8);
  changePartyStatusRequest(uint64, int8) airecv clsend;
  changePartyStatusRequestAiToUd(uint64, uint64, int8);
  changePartyStatusResponseUdToAi(uint64, uint64, int8, int8) airecv;
  changePartyStatusResponse(uint64, int8, int8, uint64);
  partyInfoOfHostRequestAiToUd(uint64, uint64);
  partyInfoOfHostFailedResponseUdToAi(uint64) airecv;
  partyInfoOfHostResponseUdToAi(party, uint64[]) airecv;
  givePartyRefundResponse(uint64, uint64, int8, uint64, uint64);
  getPartyZone(uint64, uint64, uint8) clsend airecv;
  receivePartyZone(uint64, uint64, uint64);
  freeZoneIdFromPlannedParty(uint64, uint64) clsend airecv;
  sendAvToPlayground(uint64, uint8);
  exitParty(uint64) clsend airecv;
  removeGuest(uint64, uint64) airecv clsend;
  partyManagerAIStartingUp(uint64, uint64);
  partyManagerAIGoingDown(uint64, uint64);
  partyHasStartedAiToUd(uint64, uint64, uint64, uint64, string);
  toonHasEnteredPartyAiToUd(uint64);
  toonHasExitedPartyAiToUd(uint64);
  partyHasFinishedUdToAllAi(uint64) airecv;
  updateToPublicPartyInfoUdToAllAi(uint64, uint64, uint64, uint64, uint8, uint8, string, uint8 [], uint64) airecv;
  updateToPublicPartyCountUdToAllAi(uint64, uint8) airecv;
  requestShardIdZoneIdForHostId(uint64) clsend airecv;
  sendShardIdZoneIdToAvatar(uint64, uint64);
  partyManagerUdStartingUp() airecv;
  updateAllPartyInfoToUd(uint64, uint64, uint64, uint64, uint8, uint8, string, uint8 [], uint64);
  forceCheckStart();
  requestMw(uint64, string, uint64, uint64);
  mwResponseUdToAllAi(uint64, string, uint64, uint64) airecv;
};

dclass DistributedObjectGlobal : DistributedObject {
};

dclass RATManager : DistributedObjectGlobal {
};

dclass AwardManager : DistributedObjectGlobal {
  giveAwardToToon(uint64, DoId, string, DoId, uint64, uint64);
};

dclass DistributedCpuInfoMgr : DistributedObjectGlobal {
  setCpuInfoToUd(uint64, uint64, string, string);
};

dclass DistributedSecurityMgr : DistributedObjectGlobal {
  requestAccountId(uint64, uint64, uint64);
  requestAccountIdResponse(uint64, uint64) airecv;
};

dclass NonRepeatableRandomSourceClient {
  getRandomSamplesReply(uint64, uint64 []) airecv;
};

dclass TTCodeRedemptionMgr : DistributedObject, NonRepeatableRandomSourceClient {
  giveAwardToToonResult(uint64, uint64);
  redeemCode(uint64, char [0-256]) airecv clsend;
  redeemCodeAiToUd(uint64, DoId, uint64, string, uint64);
  redeemCodeResultUdToAi(uint64, uint64, uint64, uint64, uint64) airecv;
  redeemCodeResult(uint64, uint64, uint64);
};

dclass NonRepeatableRandomSource : DistributedObject, NonRepeatableRandomSourceClient {
  getRandomSamples(DoId, string, uint64, uint64);
  randomSample(DoId, uint64);
  randomSampleAck() airecv;
};

dclass DistributedInGameNewsMgr : DistributedObjectGlobal {
  setLatestIssueStr(string) required broadcast ram;
  inGameNewsMgrAIStartingUp(uint64, uint64);
  newIssueUDtoAI(string) airecv;
};

dclass DistributedWhitelistMgr : DistributedObjectGlobal {
  updateWhitelist() broadcast;
  whitelistMgrAIStartingUp(uint64, uint64);
  newListUDtoAI() airecv;
};

dclass TTGameServicesManager : GameServicesManager {
  setNamePattern(uint64, int64, uint8, int64, uint8, int64, uint8, int64, uint8) clsend;
  namePatternResponse(uint64, uint8);
  setNameTyped(uint64, string) clsend;
  nameTypedResponse(uint64, uint8);
  createAvatar(blob, uint8) clsend;
  createAvatarResponse(uint64);
  acknowledgeAvatarName(uint64) clsend;
  acknowledgeAvatarNameResponse();
};

dclass TTOffChatManager : DistributedObjectGlobal {
  chatMessage(string(0-256)) clsend;
  whisperMessage(string(0-256), uint64) clsend;
};

dclass DistributedPhaseEventMgr : DistributedObject {
  setNumPhases(uint8) required broadcast ram;
  setDates(datetime []) broadcast required;
  setCurPhase(int8) required broadcast ram;
  setIsRunning(bool) required broadcast ram;
};

dclass DistributedHydrantZeroMgr : DistributedPhaseEventMgr {
};

dclass DistributedMailboxZeroMgr : DistributedPhaseEventMgr {
};

dclass DistributedTrashcanZeroMgr : DistributedPhaseEventMgr {
};

dclass DistributedSillyMeterMgr : DistributedPhaseEventMgr {
};

dclass TTOffMagicWordManager : DistributedObject {
  requestExecuteMagicWord(int8, int8, int64, uint64, string) airecv clsend;
  executeMagicWord(string, string, uint64[], blob, int8, int8, int64, uint64);
  generateResponse(string, string, blob, string, int8, int8, int64, uint64, string);
};
